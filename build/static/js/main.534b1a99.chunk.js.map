{"version":3,"sources":["config/client.js","context/MessageContext.js","queries/queries.js","components/Partial/SideNav.js","components/Partial/TopNav.js","utils/graphQLErrorSorter.js","components/Partial/MessageAlert.js","components/User/Login.js","components/User/Signup.js","utils/dateParser.js","components/Student/EditStudent.js","components/Trainer/EditTrainer.js","components/User/Profile.js","components/Course/EditCourse.js","components/Course/DeleteCourse.js","components/Course/CourseItem.js","components/Course/AddCourse.js","components/Course/AssignStudentToCourse.js","utils/searchLogic.js","utils/paginate.js","components/Partial/Pagination.js","components/Course/CourseList.js","components/Course/CourseDetails.js","components/Topic/EditTopic.js","components/Topic/TopicDetails.js","components/Student/StudentDetails.js","components/Trainer/TrainerDetails.js","components/User/ChangePassword.js","components/Topic/DeleteTopic.js","components/Topic/TopicItem.js","components/Topic/AddTopic.js","components/Topic/AssignTrainerToTopic.js","components/Topic/TopicList.js","components/Student/DeleteStudent.js","components/Student/StudentItem.js","components/Student/AddStudent.js","components/Student/StudentList.js","components/Trainer/DeleteTrainer.js","components/Trainer/TrainerItem.js","components/Trainer/AddTrainer.js","components/Trainer/TrainerList.js","components/Partial/Logout.js","App.js","serviceWorker.js","index.js"],"names":["client","ApolloClient","uri","MessageContext","createContext","MessageContextProvider","props","useState","message","setMessage","messageType","setMessageType","visible","setVisible","Provider","value","children","GET_COURSES","gql","ADD_COURSE","DELETE_COURSE","UPDATE_COURSE","GET_TOPICS","ADD_TOPIC","DELETE_TOPIC","UPDATE_TOPIC","GET_STUDENTS","ADD_STUDENT","UPDATE_STUDENT","DELETE_STUDENT","GET_TRAINERS","ADD_TRAINER","UPDATE_TRAINER","DELETE_TRAINER","LOGIN","SIGNUP","GET_USER_BY_ID","ASSIGN_STUDENT_TO_COURSE","ASSIGN_TRAINER_TO_TOPIC","GET_COURSE_BY_ID","GET_TOPIC_BY_ID","GET_STUDENT_BY_ID","GET_TRAINER_BY_ID","CHANGE_PASWORD","SideNav","userID","localStorage","getItem","userData","useQuery","variables","className","loading","error","data","getUserByID","role","email","displayProfile","to","displayNavLinks","TopNav","Navbar","color","light","expand","Container","aria-hidden","filterGraphQLString","errorMessage","substring","length","MessageAlert","useContext","theMessage","toggle","Modal","isOpen","ModalHeader","ModalBody","UncontrolledAlert","ModalFooter","Button","onClick","Login","removeItem","window","location","reload","setEmail","password","setPassword","useMutation","login","onSubmit","e","a","preventDefault","loginData","console","log","id","setItem","history","push","Form","FormGroup","Label","htmlFor","Input","type","placeholder","name","required","onChange","target","block","Signup","username","setUsername","signup","signupData","mS","dateParserWithMonth","dateItem","parsedDate","parseInt","dateObject","Date","y","getFullYear","m","getMonth","d","getDate","dateParserWithMonth_ISODate","parse","EditStudent","studentItem","buttonDisabled","setButtonDisabled","setName","address","setAddress","phone_number","setPhoneNumber","dob","setDob","coursesIDs","update","cache","updateStudent","students","readQuery","query","writeQuery","map","item","modal","setModal","studentID","href","includes","rows","disabled","EditTrainer","trainerItem","topicsIDs","profession","setProfession","updateTrainer","trainers","trainerID","Profile","student","trainer","style","marginBottom","courses","courseList","courseItem","key","topics","topicList","topicItem","title","EditCourse","updateCourse","courseID","DeleteCourse","courseData","deleteCourse","filter","onDelete","getCourseByID","participated_students","dipslayTopicList","displayParticipatedStudents","displayCourseDetails","CourseItem","created_date","AddCourse","addCourse","concat","AssignStudentToCourse","studentData","assignStudentToCourse","setCourseID","setStudentID","setTimeout","defaultValue","displayStudentSelect","selectedStudent","currentCourses","displayCourseSelect","paginateLogic","list","pageObject","slice","startIndex","endIndex","paginate","totalItems","startPage","endPage","currentPage","pageSize","maxPages","totalPages","Math","ceil","maxPagesBeforeCurrentPage","floor","maxPagesAfterCurrentPage","min","pages","Array","from","keys","i","PaginationComponent","setCurrentPage","Pagination","page","CourseListSearchEngine","searchedName","setSearchedName","CourseList","Table","hover","searchLogic","currentList","toLowerCase","courseSearchLogic","CourseDetails","match","params","assignedTrainers","displayUtilBox","forEach","assigned_trainers","index","EditTopic","setTitle","courseQueryObject","updateTopic","topicID","TopicDetails","getTopicByID","course","StudentDetails","getStudentByID","user","TrainerDetails","getTrainerByID","ChangePassword","oldPassword","setOldPassword","newPassword","setNewPassword","change_password","DeleteTopic","topicData","deleteTopic","displayAssignedTrainers","displayTopicDetails","TopicItem","AddTopic","addTopic","AssignTrainerToTopic","trainerData","assignTrainerToTopic","setTrainerID","setTopicID","displayTrainerSelect","currentTopics","selectedTrainer","displayTopicSelect","TopicListSearchEngine","searchedTitle","setSearchedTitle","searchedCourseID","setSearchedCourseID","displayCourseOptions","TopicList","topicSearchLogic","DeleteStudent","deleteStudent","dipslayCourseList","displayStudentDetails","StudentItem","AddStudent","setCoursesIDs","addStudent","resetValue","StudentListSearchEngine","StudentList","studentList","studentSearchLogic","DeleteTrainer","deleteTrainer","displayTrainerDetails","TrainerItem","AddTrainer","setTopicsIDs","addTrainer","TrainerListSearchEngine","topicDate","searchedTopicID","setSearchedTopicID","displayTopicOptions","TrainerList","trainerList","trainerSearchLogic","Logout","clearStore","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.534b1a99.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\nconst MAIN_PROXY_URL = \"https://node-js-sms-backend-123.herokuapp.com/\"\r\n\r\nconst client = new ApolloClient({\r\n  uri: MAIN_PROXY_URL,\r\n});\r\n\r\nexport default client;","import React, {createContext, useState} from 'react';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nfunction MessageContextProvider(props) {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messageType, setMessageType] = useState(\"\");\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    return (\r\n        <MessageContext.Provider value={{message, visible, messageType, setMessage, setMessageType, setVisible}}>\r\n            {props.children}\r\n        </MessageContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MessageContextProvider\r\n","import {\r\n  gql\r\n} from \"apollo-boost\";\r\n\r\nexport const GET_COURSES = gql `\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n      created_date\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_COURSE = gql `\r\nmutation ($name: String!){\r\n    addCourse(name: $name){\r\n        id\r\n        name\r\n        created_date\r\n      }\r\n}\r\n`;\r\n\r\nexport const DELETE_COURSE = gql `\r\nmutation ($courseID: ID!){\r\n    deleteCourse(courseID: $courseID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_COURSE = gql `\r\nmutation ($courseID: ID!, $name: String){\r\n    updateCourse(courseID: $courseID, name: $name) {\r\n      id\r\n      name\r\n      created_date\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_TOPICS = gql `\r\nquery {\r\n  topics {\r\n    id\r\n    title\r\n    created_date\r\n    courseID\r\n    course {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_TOPIC = gql `\r\nmutation ($title: String!, $courseID: ID!){\r\n    addTopic(title: $title, courseID: $courseID){\r\n      id\r\n      title\r\n      created_date\r\n      courseID\r\n      course {\r\n        id\r\n        name\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\nexport const DELETE_TOPIC = gql `\r\nmutation ($topicID: ID!){\r\n    deleteTopic(topicID: $topicID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_TOPIC = gql `\r\nmutation ($topicID: ID!, $title: String, $courseID: ID){\r\n    updateTopic(topicID: $topicID, courseID: $courseID, title: $title) {\r\n      id\r\n      title\r\n      created_date\r\n      courseID\r\n      course {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_STUDENTS = gql `\r\nquery {\r\n  students {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_STUDENT = gql `\r\nmutation ($name: String!, $dob: String!\r\n  , $phone_number: String!, \r\n  $address: String!,\r\n  $email: String!,\r\n  $password: String!,\r\n  $coursesIDs: [String]){\r\n  addStudent(name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  coursesIDs: $coursesIDs,\r\n  email: $email,\r\n  password: $password) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const UPDATE_STUDENT = gql `\r\nmutation ($studentID: ID!, \r\n  $name: String, \r\n  $dob: String\r\n  , $phone_number: String, \r\n  $address: String,\r\n  $coursesIDs: [String]\r\n  ){\r\n  updateStudent(studentID: $studentID\r\n    , name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  coursesIDs: $coursesIDs) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n  mutation ($studentID: ID!) {\r\n    deleteStudent(studentID: $studentID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_TRAINERS = gql `\r\nquery {\r\n  trainers {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    profession\r\n    topicsIDs\r\n    topics {\r\n      title\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_TRAINER = gql `\r\nmutation ($name: String!,\r\n  $dob: String!,\r\n  $phone_number: String!,\r\n  $address: String!,\r\n  $topicsIDs: [String],\r\n  $email: String!,\r\n  $password: String!,\r\n  $profession: String!){\r\n\r\n  addTrainer(name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  topicsIDs: $topicsIDs,\r\n  email: $email,\r\n  password: $password,\r\n  profession: $profession) {\r\n    id\r\n    name\r\n      dob\r\n      address\r\n      phone_number\r\n      profession\r\n      topicsIDs\r\n      topics {\r\n        title\r\n      }\r\n      user {\r\n        email\r\n      }\r\n  }\r\n}\r\n`\r\n\r\nexport const UPDATE_TRAINER = gql `\r\nmutation ($trainerID: ID!, \r\n  $name: String,\r\n  $dob: String,\r\n  $phone_number: String,\r\n  $address: String,\r\n  $topicsIDs: [String],\r\n  $profession: String){\r\n\r\n  updateTrainer(trainerID: $trainerID, \r\n  name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  topicsIDs: $topicsIDs,\r\n  profession: $profession) {\r\n    id\r\n    name\r\n      dob\r\n      address\r\n      topicsIDs\r\n      phone_number\r\n      profession\r\n      topics {\r\n        title\r\n      }\r\n      user {\r\n        email\r\n      }\r\n  }\r\n}\r\n`\r\n\r\nexport const DELETE_TRAINER = gql `\r\n  mutation ($trainerID: ID!) {\r\n    deleteTrainer(trainerID: $trainerID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN = gql `\r\nmutation ($email: String!, $password: String!){\r\n  login (email: $email, password: $password){\r\n    id\r\n    role\r\n    student {\r\n      name\r\n    }\r\n    trainer {\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const SIGNUP = gql `\r\nmutation ($username: String!, $email: String!, $password: String!){\r\n  signup (username: $username, email: $email, password: $password){\r\n\t\tid\r\n    role\r\n    student {\r\n      name\r\n    }\r\n    trainer {\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_USER_BY_ID = gql`\r\nquery ($userID: ID!){\r\n  getUserByID(userID: $userID) {\r\n    id\r\n    role\r\n    email\r\n    student {\r\n      id\r\n      name\r\n      dob\r\n      address\r\n      coursesIDs\r\n      phone_number\r\n      courses {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    trainer {\r\n      id\r\n      name\r\n      dob\r\n      address\r\n      topicsIDs\r\n      phone_number\r\n      profession\r\n      topics {\r\n        title\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ASSIGN_STUDENT_TO_COURSE = gql`\r\nmutation ($courseID: ID!, $studentID: ID!){\r\n  assignStudentToCourse(courseID: $courseID, studentID: $studentID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ASSIGN_TRAINER_TO_TOPIC = gql`\r\nmutation ($trainerID: ID!, $topicID: ID!){\r\n  assignTrainerToTopic(trainerID: $trainerID, topicID: $topicID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    topicsIDs\r\n    topics {\r\n      title\r\n      id\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_COURSE_BY_ID = gql`\r\nquery ($courseID: ID!){\r\n  getCourseByID(courseID: $courseID){\r\n    id\r\n    name\r\n    created_date\r\n    topics {\r\n      title\r\n      id\r\n      assigned_trainers {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    participated_students {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_TOPIC_BY_ID = gql`\r\nquery ($topicID: ID!){\r\n  getTopicByID(topicID: $topicID){\r\n    id\r\n    title\r\n    created_date\r\n    courseID\r\n    assigned_trainers {\r\n      name\r\n      id\r\n    }\r\n    course {\r\n      id\r\n      name\r\n      participated_students {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_STUDENT_BY_ID = gql`\r\nquery ($studentID: ID!){\r\n  getStudentByID(studentID: $studentID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    user {\r\n      email\r\n    }\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_TRAINER_BY_ID = gql `\r\nquery ($trainerID: ID!) {\r\n  getTrainerByID(trainerID: $trainerID) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    profession\r\n    created_date\r\n    topicsIDs\r\n    topics {\r\n      title\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const CHANGE_PASWORD = gql`\r\n  mutation ($userID: ID!, $oldPassword: String!, $newPassword: String!) {\r\n    changePassword(userID: $userID, oldPassword: $oldPassword, newPassword: $newPassword) {\r\n      id\r\n    }\r\n  }\r\n`\r\n ","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_USER_BY_ID} from \"../../queries/queries\";\r\n\r\nfunction SideNav() {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n\r\n    const displayNavLinks = () => {\r\n        const {loading, error} = userData;\r\n\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return (\r\n            <>\r\n                <li>\r\n                    <Link to=\"/\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/signup\">\r\n                        Signup\r\n                    </Link>\r\n                </li>\r\n            </>\r\n        )\r\n\r\n        const {role} = userData.data.getUserByID;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/profile\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/courses\">\r\n                            Courses\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/topics\">\r\n                            Topics\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/trainers\">\r\n                            Trainers\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/students\">\r\n                            Students\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"text-danger\" to=\"/logout\">\r\n                            Logout\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        } else if (role === \"Student\" || role === \"Trainer\") {\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/profile\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"text-danger\" to=\"/logout\">\r\n                            Logout\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/\">\r\n                            Login\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/signup\">\r\n                            Signup\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const displayProfile = () => {\r\n        const {loading, error} = userData;\r\n\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return (\r\n            <div className=\"profile\">\r\n                <h4>No user has been specified</h4>\r\n                <h6>Please login</h6>\r\n            </div>\r\n        )\r\n\r\n        const {role, email} = userData.data.getUserByID;\r\n        return (\r\n            <div className=\"profile\">\r\n                <h4>{email}</h4>\r\n                <h6>{role}</h6>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"side-nav\">\r\n\r\n            <div className=\"close-nav-btn\">\r\n                X\r\n            </div>\r\n            \r\n            {displayProfile()}\r\n\r\n            <div className=\"side-nav-list\">\r\n                <ul>\r\n                    {displayNavLinks()}\r\n                </ul>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNav\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  Container\r\n} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst TopNav = (props) => {\r\n  return (\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <Container>\r\n            <Link to=\"/\" className=\"navbar-brand\">Course Management System</Link>\r\n            <div className=\"nav-btn\">\r\n                <i className=\"fas fa-bars fa-2x\" aria-hidden=\"true\"></i>\r\n            </div>\r\n        </Container>\r\n      </Navbar>\r\n  );\r\n}\r\n\r\nexport default TopNav;","export const filterGraphQLString = (errorMessage) => {\r\n    return errorMessage.substring(15, errorMessage.length);\r\n}","import React, {useContext} from 'react';\r\nimport { UncontrolledAlert, Modal, ModalFooter, ModalBody, ModalHeader, Button } from 'reactstrap';\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\n\r\nconst MessageAlert = (props) => {\r\n    const {message, messageType, visible, setVisible} = useContext(MessageContext)\r\n    const theMessage = message;\r\n\r\n    if (!message) return <></>\r\n\r\n    const toggle = () => {\r\n      setVisible(false);\r\n    }\r\n\r\n  return (\r\n    <Modal isOpen={visible} toggle={toggle}>\r\n      <ModalHeader toggle={toggle}></ModalHeader>\r\n        <ModalBody>\r\n          <UncontrolledAlert color={messageType}>\r\n            {theMessage}\r\n          </UncontrolledAlert>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default MessageAlert;","import React, {useState, useContext} from 'react';\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {LOGIN} from \"../../queries/queries\";\r\nimport {Form, FormGroup, Input, Button, Label, Container} from \"reactstrap\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport {filterGraphQLString} from \"../../utils/graphQLErrorSorter\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nfunction Login(props) {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const userID = localStorage.getItem(\"userID\");\r\n    if (userID){\r\n        localStorage.removeItem(\"userID\");\r\n        window.location.reload();\r\n    }\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login, { data }] = useMutation(LOGIN);\r\n\r\n    const onSubmit = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const loginData = await login({ variables: { email, password } });\r\n            console.log(loginData)\r\n            if (loginData.data.login.id){\r\n                localStorage.setItem(\"userID\", loginData.data.login.id);\r\n                props.history.push(\"/profile\");\r\n                window.location.reload();\r\n            }\r\n        } catch (error) {\r\n            setMessage(filterGraphQLString(error.message));\r\n            setMessageType(\"danger\");\r\n            setVisible(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Login</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={onSubmit}>\r\n\r\n                        <MessageAlert/>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"email\">Email:</Label>\r\n                            <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                                setEmail(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"password\">Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                                setPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"dark\" block type=\"submit\">Login</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, {useState, useContext} from 'react';\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {SIGNUP} from \"../../queries/queries\";\r\nimport {Form, FormGroup, Input, Button, Label, Container} from \"reactstrap\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport {filterGraphQLString} from \"../../utils/graphQLErrorSorter\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nfunction Signup(props) {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const userID = localStorage.getItem(\"userID\");\r\n    if (userID){\r\n        localStorage.removeItem(\"userID\");\r\n        window.location.reload();\r\n    }\r\n    const [email, setEmail] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [signup, { data }] = useMutation(SIGNUP);\r\n\r\n    const onSubmit = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const signupData = await signup({ variables: { username, email, password } });\r\n            console.log(signupData)\r\n            if (signupData.data.signup.id){\r\n                localStorage.setItem(\"userID\", signupData.data.signup.id);\r\n                props.history.push(\"/profile\");\r\n                window.location.reload();\r\n            }\r\n        } catch (error) {\r\n            setMessage(filterGraphQLString(error.message));\r\n            setMessageType(\"danger\");\r\n            setVisible(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Login</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={onSubmit}>\r\n\r\n                        <MessageAlert/>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"username\">Username:</Label>\r\n                            <Input type=\"username\" placeholder=\"Username\" id=\"username\" name=\"username\" required value={username} onChange={e => {\r\n                                setUsername(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"email\">Email:</Label>\r\n                            <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                                setEmail(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"password\">Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                                setPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"dark\" block type=\"submit\">Signup</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","var mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\nexport const dateParser = (dateItem) => {\r\n    const parsedDate = parseInt(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = \"\" + dateObject.getMonth();\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (m.length === 1){\r\n        m = \"0\" + m;\r\n    }\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${y}-${m}-${d}`;\r\n}\r\n\r\nexport const dateParserWithMonth = (dateItem) => {\r\n    const parsedDate = parseInt(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = mS[dateObject.getMonth()];\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${d}-${m}-${y}`;\r\n}\r\n\r\nexport const dateParserWithMonth_ISODate = (dateItem) => {\r\n    const parsedDate = Date.parse(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = mS[dateObject.getMonth()];\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${d}-${m}-${y}`;\r\n}\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_STUDENT, GET_STUDENTS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditStudent = (props) => {\r\n    const {\r\n        className,\r\n        studentItem\r\n      } = props;\r\n\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [name, setName] = useState(studentItem.name);\r\n    const [address, setAddress] = useState(studentItem.address);\r\n    const [phone_number, setPhoneNumber] = useState(studentItem.phone_number);\r\n    const [dob, setDob] = useState(studentItem.dob);\r\n    const [coursesIDs, setCoursesIDs] = useState(studentItem.coursesIDs);\r\n    const [updateStudent, { data }] = useMutation(UPDATE_STUDENT, {\r\n        update(cache, { data: { updateStudent } }) {\r\n          const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n          cache.writeQuery({\r\n            query: GET_STUDENTS,\r\n            data: { data: { students: students.map(item => {\r\n                if (item.id == updateStudent.id) {\r\n                    return updateStudent;\r\n                } \r\n                return item;\r\n            }) }, },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await updateStudent({ variables: { studentID: studentItem.id, name, address, dob, phone_number, coursesIDs } });\r\n    const url = window.location.href;\r\n    if (url.includes(\"profile\")){\r\n      setMessage(\"Successfully updated. Please reload to take effect\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    } else {\r\n      setMessage(\"Successfully updated\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    }\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Student</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" required value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditStudent;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_TRAINER, GET_TRAINERS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditTrainer = (props) => {\r\n    const {\r\n        className,\r\n        trainerItem\r\n      } = props;\r\n\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [name, setName] = useState(trainerItem.name);\r\n    const [address, setAddress] = useState(trainerItem.address);\r\n    const [phone_number, setPhoneNumber] = useState(trainerItem.phone_number);\r\n    const [dob, setDob] = useState(trainerItem.dob);\r\n    const [topicsIDs, setTopicsIDs] = useState(trainerItem.topicsIDs);\r\n    const [profession, setProfession] = useState(trainerItem.profession);\r\n    const [updateTrainer, { data }] = useMutation(UPDATE_TRAINER, {\r\n        update(cache, { data: { updateTrainer } }) {\r\n          const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n          cache.writeQuery({\r\n            query: GET_TRAINERS,\r\n            data: { data: { trainers: trainers.map(item => {\r\n                if (item.id == updateTrainer.id) {\r\n                    return updateTrainer;\r\n                } \r\n                return item;\r\n            }) }, },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await updateTrainer({ variables: { trainerID: trainerItem.id, name, address, dob, phone_number, topicsIDs, profession } });\r\n    const url = window.location.href;\r\n    if (url.includes(\"profile\")){\r\n      setMessage(\"Successfully updated. Please reload to take effect\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    } else {\r\n      setMessage(\"Successfully updated\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    }\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Trainer</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"profession\">Profession:</Label>\r\n                    <Input type=\"text\" placeholder=\"Profession\" id=\"profession\" name=\"profession\" required value={profession} onChange={e => {\r\n                        setProfession(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" required value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTrainer;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport {Container} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditStudent from \"../Student/EditStudent\";\r\nimport EditTrainer from \"../Trainer/EditTrainer\";\r\n\r\nfunction Profile(props) {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const { loading, error, data } = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {role, email, student, trainer} = data.getUserByID;\r\n\r\n    const displayUpdateButtons = () => {\r\n        if (role === \"Admin\") {\r\n            return \"\";\r\n        } else if (role === \"Student\") {\r\n            return <EditStudent studentItem={student}/>\r\n        } else if (role === \"Trainer\") {\r\n            return <EditTrainer trainerItem={trainer}/>\r\n        } \r\n    }\r\n\r\n    const displayProfile = () => {\r\n        if (role === \"Admin\") {\r\n            return (\r\n                <div>\r\n                    \r\n                </div>\r\n            )\r\n        } else if (role === \"Student\") {\r\n            const {name, dob, address, phone_number, courses} = student\r\n            const courseList = courses.length === 0 ? (\r\n                <ul>\r\n                    <li>\r\n                        Nothing to learn\r\n                    </li>\r\n                </ul>\r\n            ) : (\r\n                <ul>\r\n                    {courses.map(courseItem => {\r\n                    return <li key={courseItem.id} >\r\n                                <Link to={`/courses/${courseItem.id}`}>\r\n                                {courseItem.name}\r\n                                </Link>\r\n                            </li>\r\n                    })}\r\n                </ul>\r\n            )\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Name:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{name}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Date of Birth:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Address:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{address}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Phone Number:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{phone_number}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Email:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{email}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Participated Courses:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        {courseList}\r\n                    </div>\r\n\r\n                    </div>               \r\n                </div>\r\n            )\r\n        } else if (role === \"Trainer\") {\r\n            const {name, dob, address, phone_number, topics, profession} = trainer\r\n            const topicList = topics.length === 0 ? (\r\n                <ul>\r\n                    <li>\r\n                        Nothing to teach\r\n                    </li>\r\n                </ul>\r\n            ) : (\r\n                <ul>\r\n                    {topics.map(topicItem => {\r\n                    return <li key={topicItem.id} >\r\n                                <Link to={`/topics/${topicItem.id}`}>\r\n                                {topicItem.title}\r\n                                </Link>\r\n                            </li>\r\n                    })}\r\n                </ul>\r\n            )\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{email}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Profession:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{profession}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            {topicList}\r\n                        </div>\r\n\r\n                    </div>               \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Profile</h2>\r\n                <div className=\"box-content\">\r\n                    <h4>Logged in as {email}</h4>\r\n                    <h6 style={{marginBottom: \"30px\"}}>{role}</h6>\r\n                    {displayProfile()}\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Configuration</h2>\r\n                <div className=\"box-content util-box align-items-center\">\r\n                    <Link to=\"/change-password\" className=\"btn btn-primary\">Change Password</Link>\r\n                    {displayUpdateButtons()}\r\n                    <Link to=\"/logout\" className=\"btn btn-danger\">Logout</Link>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_COURSE, GET_COURSES} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditCourse = (props) => {\r\n    const {courseItem} = props;\r\n    const [name, setName] = useState(courseItem.name);\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [updateCourse, { data }] = useMutation(UPDATE_COURSE, {\r\n        update(cache, { data: { updateCourse } }) {\r\n          const { courses } = cache.readQuery({ query: GET_COURSES })\r\n          cache.writeQuery({\r\n            query: GET_COURSES,\r\n            data: { courses: courses.map(item => {\r\n                if (item.id === updateCourse.id) {\r\n                    return updateCourse;\r\n                } \r\n                return item;\r\n            }) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await updateCourse({ variables: { name, courseID: courseItem.id } });\r\n    setMessage(\"Successfully updated\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Course Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Course Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCourse;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_COURSE_BY_ID, GET_COURSES, DELETE_COURSE} from \"../../queries/queries\";\r\n\r\nconst DeleteCourse = (props) => {\r\n  const {\r\n    className,\r\n    courseID\r\n  } = props;\r\n  const courseData = useQuery(GET_COURSE_BY_ID, {\r\n      variables: {\r\n        courseID\r\n      }\r\n  })\r\n  const [deleteCourse, { data }] = useMutation(DELETE_COURSE, {\r\n    update(cache, { data: { deleteCourse } }) {\r\n      const { courses } = cache.readQuery({ query: GET_COURSES })\r\n      cache.writeQuery({\r\n        query: GET_COURSES,\r\n        data: { courses: courses.filter(item => {\r\n            return item.id !== deleteCourse.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayTopicList  = (topics) => {\r\n    if (topics.length === 0){\r\n        return <li key={\"LOL\"}>No topic has assigned to this course</li>\r\n    } else {\r\n        return topics.map(topicItem => {\r\n            return <li key={topicItem.id}>{topicItem.title}</li>\r\n        })\r\n    }\r\n}\r\n\r\n    const displayParticipatedStudents = (participated_students) => {\r\n        if (participated_students.length === 0){\r\n            return <li key={\"LOL2\"}>No student has participated in this course</li>\r\n        } else {\r\n            return participated_students.map(studentItem => {\r\n                return <li key={studentItem.id}>{studentItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n  const displayCourseDetails = () => {\r\n    const {loading, error, data} = courseData\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, topics, participated_students} = data.getCourseByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Topics:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayTopicList(topics)}\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Participated Students:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {displayParticipatedStudents(participated_students)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteCourse({ variables: { courseID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Course</ModalHeader>\r\n        <ModalBody>\r\n            {displayCourseDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteCourse;","import React from 'react';\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport EditCourse from \"./EditCourse\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DeleteCourse from \"./DeleteCourse\";\r\n\r\nfunction CourseItem(props) {\r\n    const {courseItem} = props;\r\n    const {name, created_date, id} = props.courseItem;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/courses/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth(created_date)}</td>\r\n            <td className=\"utils\">\r\n                <EditCourse courseItem={courseItem}/>\r\n                <DeleteCourse courseID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default CourseItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_COURSE, GET_COURSES} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddCourse = (props) => {\r\n    const {\r\n      className\r\n    } = props;\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(\"\");\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [addCourse, { data }] = useMutation(ADD_COURSE, {\r\n        update(cache, { data: { addCourse } }) {\r\n          console.log(addCourse);\r\n          const { courses } = cache.readQuery({ query: GET_COURSES })\r\n          cache.writeQuery({\r\n            query: GET_COURSES,\r\n            data: { courses: courses.concat([addCourse]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await addCourse({ variables: { name } });\r\n    setName(\"\");\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Course</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Course Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Course Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\"  disabled={buttonDisabled}>Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCourse;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENTS, GET_COURSES, ASSIGN_STUDENT_TO_COURSE} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AssignStudentToCourse = (props) => {\r\n    const courseData = useQuery(GET_COURSES)\r\n    const studentData = useQuery(GET_STUDENTS)\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [assignStudentToCourse, assignData] = useMutation(ASSIGN_STUDENT_TO_COURSE, {\r\n      update(cache, { data: { assignStudentToCourse } }) {\r\n        const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n        cache.writeQuery({\r\n          query: GET_STUDENTS,\r\n          data: { students: students.map(item => {\r\n            if (item.id === assignStudentToCourse.id) {\r\n                return assignStudentToCourse;\r\n            } \r\n            return item;\r\n        }) },\r\n        });\r\n      }\r\n    })\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    \r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const displayCourseSelect = () => {\r\n    const { loading, error, data } = courseData;\r\n\r\n    if (loading || studentData.loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error || studentData.error) return <option disabled>{error.message}</option>;\r\n\r\n    let selectedStudent;\r\n    let currentCourses = data.courses;\r\n\r\n    if (studentID){\r\n      selectedStudent = studentData.data.students.filter(studentItem => {\r\n        return studentItem.id === studentID\r\n      })[0];\r\n\r\n      currentCourses = currentCourses.filter(courseItem => {\r\n        return !selectedStudent.coursesIDs.includes(courseItem.id)\r\n      })\r\n    }\r\n\r\n    if (currentCourses.length === 0){\r\n      return <option disabled key={\"LOL3\"}>\r\n            No student has been specified or this student has participated in all available courses\r\n          </option> \r\n    }\r\n\r\n    return currentCourses.map(courseItem => {\r\n          return <option value={courseItem.id} key={courseItem.id}>\r\n            {courseItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayStudentSelect = () => {\r\n    const { loading, error, data } = studentData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentStudents = data.students;\r\n\r\n    return currentStudents.map(studentItem => {\r\n          return <option value={studentItem.id} key={studentItem.id}>\r\n            {studentItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await assignStudentToCourse({variables: {courseID, studentID}})\r\n    setCourseID(\"\");\r\n    setStudentID(\"\");\r\n    setMessage(\"Successfully assigned\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Assign Student To Course</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Assign Student To Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n            <MessageAlert/>\r\n\r\n            <FormGroup>\r\n              <Label htmlFor=\"studentID\">Student:</Label>\r\n              <select required className=\"custom-select\" id=\"studentID\" name=\"studentID\" defaultValue={\"\"} value={studentID} onChange={(e) => {\r\n                setStudentID(e.target.value)\r\n              }}>\r\n                <option value={\"\"} disabled>--Student--</option>\r\n              {displayStudentSelect()}\r\n              </select>\r\n            </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select required className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                      setCourseID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Course--</option>\r\n                    {displayCourseSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Assign</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignStudentToCourse;","export const paginateLogic = (list, pageObject) => {\r\n    return list.slice(pageObject.startIndex, pageObject.endIndex + 1);\r\n}\r\n\r\nexport const trainerSearchLogic = (list, searchLogic) => {\r\n    const {searchedName, searchedTopicID} = searchLogic;\r\n    let currentList = list;\r\n\r\n    if (searchedName) {\r\n        currentList = currentList.filter(studentItem => {\r\n            return studentItem.name.toLowerCase().includes(searchedName.toLowerCase());\r\n        })\r\n    }\r\n\r\n    if (searchedTopicID) {\r\n        currentList = currentList.filter(studentItem => {\r\n            return studentItem.topicsIDs.includes(searchedTopicID)\r\n        })\r\n    }\r\n\r\n    return currentList;\r\n}\r\n\r\nexport const studentSearchLogic = (list, searchLogic) => {\r\n    const {searchedName, searchedCourseID} = searchLogic;\r\n    let currentList = list;\r\n\r\n    if (searchedName) {\r\n        currentList = currentList.filter(studentItem => {\r\n            return studentItem.name.toLowerCase().includes(searchedName.toLowerCase());\r\n        })\r\n    }\r\n\r\n    if (searchedCourseID) {\r\n        currentList = currentList.filter(studentItem => {\r\n            return studentItem.coursesIDs.includes(searchedCourseID)\r\n        })\r\n    }\r\n\r\n    return currentList;\r\n}\r\n\r\nexport const courseSearchLogic = (list, searchLogic) => {\r\n    const {searchedName} = searchLogic;\r\n    let currentList = list;\r\n\r\n    if (searchedName) {\r\n        currentList = currentList.filter(courseItem => {\r\n            return courseItem.name.toLowerCase().includes(searchedName.toLowerCase());\r\n        })\r\n    }\r\n\r\n    return currentList;\r\n}\r\n\r\nexport const topicSearchLogic = (list, searchLogic) => {\r\n    const {searchedTitle, searchedCourseID} = searchLogic;\r\n    let currentList = list;\r\n\r\n    if (searchedTitle) {\r\n        currentList = currentList.filter(topicItem => {\r\n            return topicItem.title.toLowerCase().includes(searchedTitle.toLowerCase());\r\n        })\r\n    }\r\n\r\n    if (searchedCourseID) {\r\n        currentList = currentList.filter(topicItem => {\r\n            return topicItem.courseID === searchedCourseID;\r\n        })\r\n    }\r\n\r\n    return currentList;\r\n}","function paginate(\r\n    totalItems,\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    maxPages = 10\r\n) {\r\n    // calculate total pages\r\n    let totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    // ensure current page isn't out of range\r\n    if (currentPage < 1) {\r\n        currentPage = 1;\r\n    } else if (currentPage > totalPages) {\r\n        currentPage = totalPages;\r\n    }\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= maxPages) {\r\n        // total pages less than max so show all pages\r\n        startPage = 1;\r\n        endPage = totalPages;\r\n    } else {\r\n        // total pages more than max so calculate start and end pages\r\n        let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\r\n        let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\r\n        if (currentPage <= maxPagesBeforeCurrentPage) {\r\n            // current page near the start\r\n            startPage = 1;\r\n            endPage = maxPages;\r\n        } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\r\n            // current page near the end\r\n            startPage = totalPages - maxPages + 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // current page somewhere in the middle\r\n            startPage = currentPage - maxPagesBeforeCurrentPage;\r\n            endPage = currentPage + maxPagesAfterCurrentPage;\r\n        }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    let startIndex = (currentPage - 1) * pageSize;\r\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n        totalItems: totalItems,\r\n        currentPage: currentPage,\r\n        pageSize: pageSize,\r\n        totalPages: totalPages,\r\n        startPage: startPage,\r\n        endPage: endPage,\r\n        startIndex: startIndex,\r\n        endIndex: endIndex,\r\n        pages: pages\r\n    };\r\n}\r\n\r\nexport default paginate;","import React from 'react';\r\nimport { Pagination } from 'reactstrap';\r\n\r\nconst PaginationComponent = (props) => {\r\n    const {pageObject, setCurrentPage} = props;\r\n    const {pages, currentPage, totalPages} = pageObject;\r\n\r\n    const displayFirstPagi = () => {\r\n        return <li className=\"page-item\" key={\"first-page\"}>\r\n                <button className=\"page-link\" onClick={() => {\r\n                    setCurrentPage(1)\r\n                }}>First</button>\r\n            </li>\r\n    }\r\n\r\n    const displayLastPagi = () => {\r\n        return <li className=\"page-item\" key={\"last-page\"}>\r\n                <button className=\"page-link\" onClick={() => {\r\n                    setCurrentPage(totalPages)\r\n                }}>Last</button>\r\n            </li>\r\n    }\r\n\r\n    const displayPrevPagi = () => {\r\n        if (currentPage > 1){\r\n            return <li className=\"page-item\" key={\"prev-page\"}>\r\n            <button className=\"page-link\" onClick={() => {\r\n                setCurrentPage(currentPage - 1)\r\n            }}>Prev</button>\r\n        </li>\r\n        } else {\r\n            return <li className=\"page-item disabled\" key={\"prev-page\"}>\r\n            <button className=\"page-link\" onClick={() => {\r\n                setCurrentPage(currentPage - 1)\r\n            }}>Prev</button>\r\n        </li>\r\n        }\r\n    }\r\n\r\n    const displayNextPagi = () => {\r\n        if (currentPage < totalPages){\r\n            return <li className=\"page-item\" key={\"next-page\"}>\r\n            <button className=\"page-link\" onClick={() => {\r\n                setCurrentPage(currentPage + 1)\r\n            }}>Next</button>\r\n        </li>\r\n        } else {\r\n            return <li className=\"page-item disabled\" key={\"next-page\"}>\r\n            <button className=\"page-link\" onClick={() => {\r\n                setCurrentPage(currentPage + 1)\r\n            }}>Next</button>\r\n        </li>\r\n        }\r\n    }\r\n\r\n    const displayPagiItems = () => {\r\n        return pages.map((page) => {\r\n            if (page === currentPage){\r\n                return <li className=\"page-item active\" key={page}>\r\n                <button className=\"page-link\" onClick={() => {\r\n                    setCurrentPage(page)\r\n                }}>{page}</button>\r\n            </li>\r\n            }\r\n            return <li className=\"page-item\"  key={page}>\r\n                <button className=\"page-link\" onClick={() => {\r\n                    setCurrentPage(page)\r\n                }}>{page}</button>\r\n            </li>\r\n        })\r\n    }\r\n\r\n  return (\r\n    <Pagination>\r\n        {displayFirstPagi()}\r\n        {displayPrevPagi()}\r\n        {displayPagiItems()}\r\n        {displayNextPagi()}\r\n        {displayLastPagi()}\r\n    </Pagination>\r\n  );\r\n}\r\n\r\nexport default PaginationComponent;","import React, {useState} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSES} from \"../../queries/queries\";\r\nimport CourseItem from \"./CourseItem\";\r\nimport AddCourse from \"./AddCourse\";\r\nimport AssignStudentToCourse from \"./AssignStudentToCourse\";\r\nimport {Table, Container, Form, Label, Input, FormGroup, Button} from \"reactstrap\";\r\nimport {courseSearchLogic, paginateLogic} from \"../../utils/searchLogic\";\r\nimport paginate from \"../../utils/paginate\";\r\nimport PaginationComponent from \"../Partial/Pagination\";\r\n\r\nfunction CourseListSearchEngine(props) {\r\n\r\n    const {searchedName, setSearchedName} = props;\r\n\r\n    const resetValue = () => {\r\n        setSearchedName(\"\");\r\n    }\r\n\r\n    return (\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Search</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={(e) => e.preventDefault()}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searched-name\">Course Name</Label>\r\n                            <Input type=\"text\" id=\"searched-name\" name=\"searched-name\" value={searchedName} onChange={(e) => {\r\n                                setSearchedName(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"info\" block onClick={resetValue}>Reset</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction CourseList() {\r\n    const { loading, error, data } = useQuery(GET_COURSES);\r\n    const [searchedName, setSearchedName] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n    let courseList = data.courses;\r\n\r\n    const pageObject = paginate(courseList.length, currentPage, 6, 5)\r\n\r\n    const displayCourseItems = () => {\r\n        courseList = courseSearchLogic(courseList, {searchedName})\r\n        courseList = paginateLogic(courseList, pageObject)\r\n        return courseList.map(courseItem => {\r\n            return <CourseItem key={courseItem.id} courseItem={courseItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    <AddCourse/>\r\n                    <AssignStudentToCourse/>\r\n                </div>\r\n            </div>\r\n\r\n            <CourseListSearchEngine searchedName={searchedName} setSearchedName={setSearchedName}/>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Created Date</th>\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayCourseItems()}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    <PaginationComponent pageObject={pageObject} setCurrentPage={setCurrentPage}/>\r\n\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CourseList\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSE_BY_ID, GET_COURSES, GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditCourse from \"./EditCourse\";\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction CourseDetails(props) {\r\n    const courseID = props.match.params.courseID;\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const courseData = useQuery(GET_COURSES);\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n    const { loading, error, data } = useQuery(GET_COURSE_BY_ID, {\r\n        variables: {courseID},\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const courseItem = data.getCourseByID;\r\n    const {name, created_date, topics, participated_students} = courseItem;\r\n    let assignedTrainers = [];\r\n\r\n    const dipslayTopicList  = () => {\r\n        if (topics.length === 0){\r\n            return <li key={\"LOL\"}>No topic has assigned to this course</li>\r\n        } else {\r\n            return topics.map(topicItem => {\r\n                return <li key={topicItem.id}><Link to={`/topics/${topicItem.id}`}>{topicItem.title}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    const displayAssignedTrainers = () => {\r\n        topics.forEach(topicItem => {\r\n            const {assigned_trainers} = topicItem;\r\n            assigned_trainers.forEach(trainerItem => {\r\n                if (!assignedTrainers.includes(trainerItem.name)){\r\n                    assignedTrainers.push(trainerItem.name);\r\n                }\r\n            })\r\n        });\r\n        if (assignedTrainers.length === 0){\r\n            return <li key={\"LOL1\"}>No trainer has been assigned</li>\r\n        } else {\r\n            return assignedTrainers.map((trainerItem, index) => {\r\n                return <li key={`${name}-${index}`}>{trainerItem}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayParticipatedStudents = () => {\r\n        console.log(participated_students)\r\n        if (participated_students.length === 0){\r\n            return <li key={\"LOL2\"}>No student has participated in this course</li>\r\n        } else {\r\n            return participated_students.map(studentItem => {\r\n                return <li key={studentItem.id}>{studentItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayUtilBox = () => {\r\n        const {role} = userData.data.getUserByID;\r\n        if (userData.loading) return <p>Loading...</p>;\r\n        if (userData.error) return <p>{userData.error.message}</p>;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditCourse courseItem={courseItem}/>*/}\r\n                    <Link to=\"/courses\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n            )\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            \r\n                {displayUtilBox()}\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayTopicList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Trainers:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayAssignedTrainers()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Participated Students:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayParticipatedStudents()}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CourseDetails\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {UPDATE_TOPIC, GET_COURSES, GET_TOPICS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const {topicItem} = props\r\n    const [title, setTitle] = useState(topicItem.title);\r\n    const [courseID, setCourseID] = useState(topicItem.courseID);\r\n    const courseQueryObject = useQuery(GET_COURSES);\r\n    let {loading, error} = courseQueryObject;\r\n    const [updateTopic, { data }] = useMutation(UPDATE_TOPIC, {\r\n        update(cache, { data: { updateTopic } }) {\r\n          const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n          cache.writeQuery({\r\n            query: GET_TOPICS,\r\n            data: { topics: topics.map(item => {\r\n                if (item.id == updateTopic.id) {\r\n                    return updateTopic;\r\n                } \r\n                return item;\r\n            }) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await updateTopic({ variables: { topicID: topicItem.id, title, courseID } });\r\n    setMessage(\"Successfully updated\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  const displayCourseOptions = (e) => {\r\n    if (loading) {\r\n        return <option>Loading</option>\r\n    } else if (error) {\r\n        return <option>Error</option>\r\n    } else {\r\n        let courseData = courseQueryObject.data;\r\n        return courseData.courses.map(item => {\r\n            return <option value={item.id}>{item.name}</option>\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"title\">Topic Title:</Label>\r\n                    <Input type=\"text\" placeholder=\"Topic Title\" id=\"title\" name=\"title\" required value={title} onChange={e => {\r\n                        setTitle(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={courseID} value={courseID} onChange={(e) => {\r\n                        setCourseID(e.target.value)\r\n                    }} required>\r\n                        <option disabled value={\"\"}>--Course--</option>\r\n                        {displayCourseOptions()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTopic;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TOPIC_BY_ID, GET_TOPICS, GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditTopic from \"./EditTopic\";\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction TopicDetails(props) {\r\n    const topicID = props.match.params.topicID;\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const topicData = useQuery(GET_TOPICS);\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n    const { loading, error, data } = useQuery(GET_TOPIC_BY_ID, {\r\n        variables: {topicID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const topicItem = data.getTopicByID;\r\n    const {title, created_date, course, assigned_trainers} = topicItem;\r\n\r\n    const displayAssignedTrainers = () => {\r\n        if (assigned_trainers.length === 0){\r\n            return <li key={\"LOL2\"}>No trainer has been assigned to this topic</li>\r\n        } else {\r\n            return assigned_trainers.map(trainerItem => {\r\n                return <li key={trainerItem.id}>{trainerItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayUtilBox = () => {\r\n        const {role} = userData.data.getUserByID;\r\n        if (userData.loading) return <p>Loading...</p>;\r\n        if (userData.error) return <p>{userData.error.message}</p>;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditTopic topicItem={topicItem}/>*/}\r\n                    <Link to=\"/topics\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n            )\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            \r\n            {displayUtilBox()}\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                            \r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{title}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Course:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><Link to={`/courses/${course.id}`}>{course.name}</Link></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Trainers:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayAssignedTrainers()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TopicDetails\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENT_BY_ID, GET_STUDENTS} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditStudent from \"./EditStudent\";\r\nimport {dateParserWithMonth_ISODate, dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction StudentDetails(props) {\r\n    const studentID = props.match.params.studentID;\r\n    const studentData = useQuery(GET_STUDENTS);\r\n    const { loading, error, data } = useQuery(GET_STUDENT_BY_ID, {\r\n        variables: {studentID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const studentItem = data.getStudentByID;\r\n    const {name, created_date, dob, address, phone_number, courses, user} = studentItem;\r\n\r\n    const dipslayCourseList = () => {\r\n        if (courses.length === 0){\r\n            return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n        } else {\r\n            return courses.map(courseItem => {\r\n                return <li key={courseItem.id}><Link to={`/courses/${courseItem.id}`}>{courseItem.name}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            \r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditStudent studentItem={studentItem}/>*/}\r\n                    <Link to=\"/students\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><a href={`mailto:${user.email}`}>{user.email}</a></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Participated Courses:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayCourseList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StudentDetails\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TRAINER_BY_ID, GET_TRAINERS} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditTrainer from \"./EditTrainer\";\r\nimport {dateParserWithMonth_ISODate, dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction TrainerDetails(props) {\r\n    const trainerID = props.match.params.trainerID;\r\n    const trainerData = useQuery(GET_TRAINERS);\r\n    const { loading, error, data } = useQuery(GET_TRAINER_BY_ID, {\r\n        variables: {trainerID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const trainerItem = data.getTrainerByID;\r\n    const {name, created_date, dob, address, phone_number, profession, topics, user} = trainerItem;\r\n    console.log(trainerItem)\r\n\r\n    const dipslayTopicList = () => {\r\n        if (topics.length === 0){\r\n            return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n        } else {\r\n            return topics.map(topicItem => {\r\n                return <li key={topicItem.id}><Link to={`/topics/${topicItem.id}`}>{topicItem.title}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            \r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditTrainer trainerItem={trainerItem}/>*/}\r\n                    <Link to=\"/trainers\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Profession:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{profession}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><a href={`mailto:${user.email}`}>{user.email}</a></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayTopicList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TrainerDetails\r\n","import React, {useState, useContext} from 'react';\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {CHANGE_PASWORD} from \"../../queries/queries\";\r\nimport {Form, FormGroup, Input, Button, Label, Container} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport {filterGraphQLString} from \"../../utils/graphQLErrorSorter\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nfunction ChangePassword(props) {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [oldPassword, setOldPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [change_password, { data }] = useMutation(CHANGE_PASWORD);\r\n\r\n    const onSubmit = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const userID = localStorage.getItem(\"userID\");\r\n            await change_password({\r\n                variables: {userID, oldPassword, newPassword}\r\n            })\r\n            props.history.push(\"/logout\");\r\n        } \r\n        catch (error) {\r\n            setMessage(filterGraphQLString(error.message));\r\n            setMessageType(\"danger\");\r\n            setVisible(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Change Password</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={onSubmit}>\r\n\r\n                        <MessageAlert/>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"oldPassword\">Old Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"Old Password\" id=\"oldPassword\" name=\"oldPassword\" required value={oldPassword} onChange={e => {\r\n                                setOldPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"newPassword\">New Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"New Password\" id=\"newPassword\" name=\"newPassword\" required value={newPassword} onChange={e => {\r\n                                setNewPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"dark\" block type=\"submit\">Change Password</Button>\r\n                            <Link to=\"/profile\" className=\"btn btn-info btn-block mt-2\">Back To Profile</Link>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChangePassword\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_TOPICS, GET_TOPIC_BY_ID, DELETE_TOPIC} from \"../../queries/queries\";\r\n\r\nconst DeleteTopic = (props) => {\r\n  const {\r\n    className,\r\n    topicID\r\n  } = props;\r\n  const topicData = useQuery(GET_TOPIC_BY_ID, {\r\n      variables: {\r\n        topicID\r\n      }\r\n  })\r\n  const [deleteTopic, { data }] = useMutation(DELETE_TOPIC, {\r\n    update(cache, { data: { deleteTopic } }) {\r\n      const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n      cache.writeQuery({\r\n        query: GET_TOPICS,\r\n        data: { topics: topics.filter(item => {\r\n            return item.id !== deleteTopic.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n    const displayAssignedTrainers = (assigned_trainers) => {\r\n        if (assigned_trainers.length === 0){\r\n            return <li key={\"LOL2\"}>No trainer has been assigned to this topic</li>\r\n        } else {\r\n            return assigned_trainers.map(trainerItem => {\r\n                return <li key={trainerItem.id}>{trainerItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n  const displayTopicDetails = () => {\r\n    const {loading, error, data} = topicData\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {title, course, assigned_trainers} = data.getTopicByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Title:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{title}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Course:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {course.name}\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Assigned Trainers:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {displayAssignedTrainers(assigned_trainers)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteTopic({ variables: { topicID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Topic</ModalHeader>\r\n        <ModalBody>\r\n            {displayTopicDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteTopic;","import React from 'react';\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport EditTopic from \"./EditTopic\";\r\nimport {Link} from \"react-router-dom\"\r\nimport DeleteTopic from \"./DeleteTopic\";\r\n\r\nfunction TopicItem(props) {\r\n    const {topicItem} = props;\r\n    const {title, course, created_date, id} = props.topicItem;\r\n    const {name} = course;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/topics/${id}`}>{title}</Link></td>\r\n            <td>{name}</td>\r\n            <td>{dateParserWithMonth(created_date)}</td>\r\n            <td className=\"utils\">\r\n                <EditTopic topicItem={topicItem}/>\r\n                <DeleteTopic topicID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TopicItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {ADD_TOPIC, GET_COURSES, GET_TOPICS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const courseQueryObject = useQuery(GET_COURSES);\r\n    let {loading, error} = courseQueryObject;\r\n    let courseData = courseQueryObject.data;\r\n    const [addTopic, { data }] = useMutation(ADD_TOPIC, {\r\n        update(cache, { data: { addTopic } }) {\r\n          const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n          cache.writeQuery({\r\n            query: GET_TOPICS,\r\n            data: { topics: topics.concat([addTopic]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await addTopic({ variables: { title, courseID } });\r\n    setTitle(\"\");\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n    //window.location.reload();\r\n  }\r\n\r\n  const displayCourseOptions = (e) => {\r\n    if (loading) {\r\n        return <option>Loading</option>\r\n    } else if (error) {\r\n        return <option>Error</option>\r\n    } else {\r\n        return courseData.courses.map(item => {\r\n            return <option value={item.id}>{item.name}</option>\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Topic</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"title\">Topic Title:</Label>\r\n                    <Input type=\"text\" placeholder=\"Topic Title\" id=\"title\" name=\"title\" required value={title} onChange={e => {\r\n                        setTitle(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                        setCourseID(e.target.value)\r\n                    }} required>\r\n                        <option disabled value={\"\"}>--Course--</option>\r\n                        {displayCourseOptions()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTopic;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSES, GET_TOPICS, GET_TRAINERS, ASSIGN_TRAINER_TO_TOPIC, GET_TOPIC_BY_ID} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AssignTrainerToTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const courseData = useQuery(GET_COURSES)\r\n    const trainerData = useQuery(GET_TRAINERS)\r\n    const topicData = useQuery(GET_TOPICS)\r\n    const [assignTrainerToTopic, assignData] = useMutation(ASSIGN_TRAINER_TO_TOPIC, {\r\n        update(cache, { data: { assignTrainerToTopic } }) {\r\n            const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n            cache.writeQuery({\r\n              query: GET_TRAINERS,\r\n              data: { students: trainers.map(item => {\r\n                if (item.id === assignTrainerToTopic.id) {\r\n                    return assignTrainerToTopic;\r\n                } \r\n                return item;\r\n              }) },\r\n            });\r\n          }\r\n    })\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const [trainerID, setTrainerID] = useState(\"\");\r\n    const [topicID, setTopicID] = useState(\"\");\r\n    \r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const displayCourseSelect = () => {\r\n    const { loading, error, data } = courseData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentCourses = data.courses;\r\n\r\n    return currentCourses.map(courseItem => {\r\n          return <option value={courseItem.id} key={courseItem.id}>\r\n            {courseItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayTrainerSelect = () => {\r\n    const { loading, error, data } = trainerData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentTrainers = data.trainers;\r\n\r\n    return currentTrainers.map(trainerItem => {\r\n          return <option value={trainerItem.id} key={trainerItem.id}>\r\n            {trainerItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayTopicSelect = () => {\r\n    const { loading, error, data } = topicData;\r\n\r\n    if (loading || trainerData.loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error || trainerData.error) return <option disabled>{error.message}</option>;\r\n\r\n    \r\n    let currentTopics = data.topics;\r\n    currentTopics = currentTopics.filter(topicItem => {\r\n        return topicItem.courseID === courseID;\r\n    })\r\n\r\n    if (trainerID) {\r\n        let selectedTrainer = trainerData.data.trainers.filter(trainerItem => {\r\n            return trainerItem.id === trainerID;\r\n        })[0];\r\n        currentTopics = currentTopics.filter(topicItem => {\r\n            return !selectedTrainer.topicsIDs.includes(topicItem.id)\r\n        })\r\n    }\r\n\r\n    if (currentTopics.length === 0) return <option disabled>There is no topics related to the selected course or this trainer has been assign to all the topics in this course</option>;\r\n\r\n    return currentTopics.map(topicItem => {\r\n          return <option value={topicItem.id} key={topicItem.id}>\r\n            {topicItem.title}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await assignTrainerToTopic({variables: {topicID, trainerID}})\r\n    setTrainerID(\"\");\r\n    setCourseID(\"\");\r\n    setTopicID(\"\");\r\n    setMessage(\"Successfully assigned\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Assign Trainer To Topic</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Assign Trainer To Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n            <MessageAlert/>\r\n\r\n            <FormGroup>\r\n                <Label htmlFor=\"trainerID\">Trainer:</Label>\r\n                <select className=\"custom-select\" id=\"trainerID\" name=\"trainerID\" required defaultValue={\"\"} value={trainerID} onChange={(e) => {\r\n                setTrainerID(e.target.value)\r\n                }}>\r\n                <option value={\"\"} disabled>--Trainer--</option>\r\n                {displayTrainerSelect()}\r\n                </select>\r\n            </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select required className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                      setCourseID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Course--</option>\r\n                    {displayCourseSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"topicID\">Topic:</Label>\r\n                    <select required className=\"custom-select\" id=\"topicID\" name=\"topicID\" defaultValue={\"\"} value={topicID} onChange={(e) => {\r\n                      setTopicID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Topic--</option>\r\n                    {displayTopicSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Assign</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignTrainerToTopic;","import React, {useState} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TOPICS, GET_COURSES} from \"../../queries/queries\";\r\nimport TopicItem from \"./TopicItem\";\r\nimport AddTopic from \"./AddTopic\";\r\nimport AssignTrainerToTopic from \"./AssignTrainerToTopic\"\r\nimport {Table, Container, Form, Label, Input, FormGroup, Button} from \"reactstrap\";\r\nimport paginate from \"../../utils/paginate\";\r\nimport {topicSearchLogic, paginateLogic} from \"../../utils/searchLogic\";\r\nimport PaginationComponent from \"../Partial/Pagination\";\r\n\r\nfunction TopicListSearchEngine(props) {\r\n    const courseData = useQuery(GET_COURSES);\r\n    const {searchedTitle, setSearchedTitle, searchedCourseID, setSearchedCourseID} = props;\r\n\r\n    const displayCourseOptions = (e) => {\r\n        const {loading, error, data} = courseData;\r\n        if (loading) {\r\n            return <option>Loading</option>\r\n        } else if (error) {\r\n            return <option>Error</option>\r\n        } else {\r\n            return data.courses.map(item => {\r\n                return <option key={item.id} value={item.id}>{item.name}</option>\r\n            })\r\n        }\r\n      }\r\n\r\n      const resetValue = () => {\r\n        setSearchedTitle(\"\");\r\n        setSearchedCourseID(\"\");\r\n      }\r\n\r\n    return (\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Search</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={(e) => e.preventDefault()}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searched-title\">Topic Title</Label>\r\n                            <Input type=\"text\" id=\"searched-title\" name=\"searched-title\" value={searchedTitle} onChange={(e) => {\r\n                                setSearchedTitle(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searchedCourseID\">Course:</Label>\r\n                            <select className=\"custom-select\" id=\"searchedCourseID\" name=\"searchedCourseID\" defaultValue={\"\"} value={searchedCourseID} onChange={(e) => {\r\n                                setSearchedCourseID(e.target.value)\r\n                            }} required>\r\n                                <option disabled value={\"\"}>--Course--</option>\r\n                                {displayCourseOptions()}\r\n                            </select>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"info\" block onClick={resetValue}>Reset</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction TopicList() {\r\n    const { loading, error, data } = useQuery(GET_TOPICS);\r\n    const [searchedTitle, setSearchedTitle] = useState(\"\");\r\n    const [searchedCourseID, setSearchedCourseID] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n    let topicList = data.topics;\r\n\r\n    const pageObject = paginate(topicList.length, currentPage, 6, 5)\r\n\r\n    const displayTopicItems = () => {\r\n        topicList = topicSearchLogic(topicList, {searchedTitle, searchedCourseID})\r\n        topicList = paginateLogic(topicList, pageObject)\r\n        return topicList.map(topicItem => {\r\n            return <TopicItem key={topicItem.id} topicItem={topicItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    <AddTopic/>\r\n                    <AssignTrainerToTopic/>\r\n                </div>\r\n            </div>\r\n\r\n            <TopicListSearchEngine searchedTitle={searchedTitle} setSearchedTitle={setSearchedTitle} searchedCourseID={searchedCourseID} setSearchedCourseID={setSearchedCourseID}/>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Title</th>\r\n                            <th>Course</th>\r\n                            <th>Created Date</th>\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayTopicItems()}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    <PaginationComponent pageObject={pageObject} setCurrentPage={setCurrentPage}/>\r\n\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TopicList\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_STUDENTS, GET_STUDENT_BY_ID, DELETE_STUDENT} from \"../../queries/queries\";\r\n\r\nconst DeleteStudent = (props) => {\r\n  const {\r\n    className,\r\n    studentID\r\n  } = props;\r\n  const studentData = useQuery(GET_STUDENT_BY_ID, {\r\n      variables: {\r\n        studentID\r\n      }\r\n  })\r\n  const [deleteStudent, { data }] = useMutation(DELETE_STUDENT, {\r\n    update(cache, { data: { deleteStudent } }) {\r\n      const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n      cache.writeQuery({\r\n        query: GET_STUDENTS,\r\n        data: { students: students.filter(item => {\r\n            return item.id !== deleteStudent.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayCourseList = (courses) => {\r\n    if (courses.length === 0){\r\n        return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n    } else {\r\n        return courses.map(courseItem => {\r\n            return <li key={courseItem.id}>{courseItem.name}</li>\r\n        })\r\n    }\r\n}\r\n\r\n  const displayStudentDetails = () => {\r\n    const {loading, error, data} = studentData;\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, courses} = data.getStudentByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Courses:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayCourseList(courses)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteStudent({ variables: { studentID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Student</ModalHeader>\r\n        <ModalBody>\r\n            {displayStudentDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteStudent;","import React from 'react';\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditStudent from \"./EditStudent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DeleteStudent from \"./DeleteStudent\";\r\n\r\nfunction StudentItem(props) {\r\n    const {studentItem} = props;\r\n    const {name, dob, phone_number, id, user} = studentItem;\r\n    const {email} = user;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/students/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth_ISODate(dob)}</td>\r\n            <td>{phone_number}</td>\r\n            <td><a href={`mailto:${email}`}>{email}</a></td>\r\n            {/*<td>{dateParserWithMonth(created_date)}</td>*/}\r\n            <td className=\"utils\">\r\n                <EditStudent studentItem={studentItem}/>\r\n                <DeleteStudent studentID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default StudentItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_STUDENT, GET_STUDENTS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddStudent = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [phone_number, setPhoneNumber] = useState(\"\");\r\n    const [dob, setDob] = useState(\"\");\r\n    const [coursesIDs, setCoursesIDs] = useState([]);\r\n    const [addStudent, { data }] = useMutation(ADD_STUDENT, {\r\n        update(cache, { data: { addStudent } }) {\r\n          const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n          cache.writeQuery({\r\n            query: GET_STUDENTS,\r\n            data: { students: students.concat([addStudent]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await addStudent({ variables: { name, email, address, password, dob, phone_number, coursesIDs } });\r\n    resetValue();\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  const resetValue = () => {\r\n    setName(\"\")\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n    setAddress(\"\")\r\n    setPhoneNumber(\"\")\r\n    setDob(\"\")\r\n    setCoursesIDs([])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Student</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Student</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" required value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"email\">Email:</Label>\r\n                    <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                        setEmail(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"password\">Password:</Label>\r\n                    <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddStudent;","import React, {useState} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENTS, GET_COURSES} from \"../../queries/queries\";\r\nimport StudentItem from \"./StudentItem\";\r\nimport AddStudent from \"./AddStudent\";\r\nimport {Table, Container, Form, Label, Input, FormGroup, Button} from \"reactstrap\";\r\nimport paginate from \"../../utils/paginate\";\r\nimport {studentSearchLogic, paginateLogic} from \"../../utils/searchLogic\";\r\nimport PaginationComponent from \"../Partial/Pagination\";\r\n\r\nfunction StudentListSearchEngine(props) {\r\n    const courseData = useQuery(GET_COURSES);\r\n    const {searchedName, setSearchedName, searchedCourseID, setSearchedCourseID} = props;\r\n\r\n    const displayCourseOptions = (e) => {\r\n        const {loading, error, data} = courseData;\r\n        if (loading) {\r\n            return <option>Loading</option>\r\n        } else if (error) {\r\n            return <option>Error</option>\r\n        } else {\r\n            return data.courses.map(item => {\r\n                return <option key={item.id} value={item.id}>{item.name}</option>\r\n            })\r\n        }\r\n      }\r\n\r\n      const resetValue = () => {\r\n        setSearchedName(\"\");\r\n        setSearchedCourseID(\"\");\r\n      }\r\n\r\n    return (\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Search</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={(e) => e.preventDefault()}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searched-name\">Student Name</Label>\r\n                            <Input type=\"text\" id=\"searched-name\" name=\"searched-name\" value={searchedName} onChange={(e) => {\r\n                                setSearchedName(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searchedCourseID\">Participated Course:</Label>\r\n                            <select className=\"custom-select\" id=\"searchedCourseID\" name=\"searchedCourseID\" defaultValue={\"\"} value={searchedCourseID} onChange={(e) => {\r\n                                setSearchedCourseID(e.target.value)\r\n                            }} required>\r\n                                <option disabled value={\"\"}>--Course--</option>\r\n                                {displayCourseOptions()}\r\n                            </select>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"info\" block onClick={resetValue}>Reset</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction StudentList() {\r\n    const { loading, error, data } = useQuery(GET_STUDENTS);\r\n    const [searchedName, setSearchedName] = useState(\"\");\r\n    const [searchedCourseID, setSearchedCourseID] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n    let studentList = data.students;\r\n\r\n    const pageObject = paginate(studentList.length, currentPage, 6, 5)\r\n\r\n    const displayStudentItems = () => {\r\n        studentList = studentSearchLogic(studentList, {searchedName, searchedCourseID})\r\n        studentList = paginateLogic(studentList, pageObject)\r\n        return studentList.map(studentItem => {\r\n            return <StudentItem key={studentItem.id} studentItem={studentItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content\">\r\n                    <AddStudent/>\r\n                </div>\r\n            </div>\r\n\r\n            <StudentListSearchEngine searchedName={searchedName} setSearchedName={setSearchedName} searchedCourseID={searchedCourseID} setSearchedCourseID={setSearchedCourseID}/>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Date of Birth</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Email</th>\r\n                            {/*<th>Created Date</th>*/}\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayStudentItems()}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    <PaginationComponent pageObject={pageObject} setCurrentPage={setCurrentPage}/>\r\n\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StudentList\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_TRAINERS, GET_TRAINER_BY_ID, DELETE_TRAINER} from \"../../queries/queries\";\r\n\r\nconst DeleteTrainer = (props) => {\r\n  const {\r\n    className,\r\n    trainerID\r\n  } = props;\r\n  const trainerData = useQuery(GET_TRAINER_BY_ID, {\r\n      variables: {\r\n        trainerID\r\n      }\r\n  })\r\n  const [deleteTrainer, { data }] = useMutation(DELETE_TRAINER, {\r\n    update(cache, { data: { deleteTrainer } }) {\r\n      const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n      cache.writeQuery({\r\n        query: GET_TRAINERS,\r\n        data: { trainers: trainers.filter(item => {\r\n            return item.id !== deleteTrainer.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayTopicList = (topics) => {\r\n    if (topics.length === 0){\r\n        return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n    } else {\r\n        return topics.map(topicItem => {\r\n            return <li key={topicItem.id}>{topicItem.title}</li>\r\n        })\r\n    }\r\n  }\r\n\r\n  const displayTrainerDetails = () => {\r\n    const {loading, error, data} = trainerData;\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, topics} = data.getTrainerByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Topics:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayTopicList(topics)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteTrainer({ variables: { trainerID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Student</ModalHeader>\r\n        <ModalBody>\r\n            {displayTrainerDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteTrainer;","import React from 'react';\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditTrainer from \"./EditTrainer\";\r\nimport {Link} from \"react-router-dom\"\r\nimport DeleteTrainer from \"./DeleteTrainer\";\r\n\r\nfunction TrainerItem(props) {\r\n    const {trainerItem} = props;\r\n    const {name, dob, phone_number, id, user} = trainerItem;\r\n    const {email} = user;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/trainers/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth_ISODate(dob)}</td>\r\n            <td>{phone_number}</td>\r\n            <td><a href={`mailto:${email}`}>{email}</a></td>\r\n            {/*<td>{dateParserWithMonth(created_date)}</td>*/}\r\n            <td className=\"utils\">\r\n                <EditTrainer trainerItem={trainerItem}/>\r\n                <DeleteTrainer trainerID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TrainerItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_TRAINER, GET_TRAINERS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddTrainer = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [phone_number, setPhoneNumber] = useState(\"\");\r\n    const [dob, setDob] = useState(\"\");\r\n    const [profession, setProfession] = useState(\"\");\r\n    const [topicsIDs, setTopicsIDs] = useState([]);\r\n    const [addTrainer, { data }] = useMutation(ADD_TRAINER, {\r\n        update(cache, { data: { addTrainer } }) {\r\n          const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n          cache.writeQuery({\r\n            query: GET_TRAINERS,\r\n            data: { trainers: trainers.concat([addTrainer]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    await addTrainer({ variables: { name, email, address, password, dob, phone_number, topicsIDs, profession } });\r\n    resetValue();\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  const resetValue = () => {\r\n    setName(\"\")\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n    setProfession(\"\")\r\n    setAddress(\"\")\r\n    setPhoneNumber(\"\")\r\n    setDob(\"\")\r\n    setTopicsIDs([])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Trainer</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Trainer</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"profession\">Profession:</Label>\r\n                    <Input type=\"text\" placeholder=\"Profession\" id=\"profession\" name=\"profession\" required value={profession} onChange={e => {\r\n                        setProfession(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" required name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"email\">Email:</Label>\r\n                    <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                        setEmail(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"password\">Password:</Label>\r\n                    <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\" disabled={buttonDisabled}>Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTrainer;","import React, {useState} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TRAINERS, GET_TOPICS} from \"../../queries/queries\";\r\nimport TrainerItem from \"./TrainerItem\";\r\nimport AddTrainer from \"./AddTrainer\";\r\nimport {Table, Container, Form, Label, Input, FormGroup, Button} from \"reactstrap\";\r\nimport paginate from \"../../utils/paginate\";\r\nimport {trainerSearchLogic, paginateLogic} from \"../../utils/searchLogic\";\r\nimport PaginationComponent from \"../Partial/Pagination\";\r\n\r\nfunction TrainerListSearchEngine(props) {\r\n    const topicDate = useQuery(GET_TOPICS);\r\n    const {searchedName, setSearchedName, searchedTopicID, setSearchedTopicID} = props;\r\n\r\n    const displayTopicOptions = (e) => {\r\n        const {loading, error, data} = topicDate;\r\n        if (loading) {\r\n            return <option>Loading</option>\r\n        } else if (error) {\r\n            return <option>Error</option>\r\n        } else {\r\n            return data.topics.map(item => {\r\n                return <option key={item.id} value={item.id}>{item.title}</option>\r\n            })\r\n        }\r\n      }\r\n\r\n      const resetValue = () => {\r\n        setSearchedName(\"\");\r\n        setSearchedTopicID(\"\");\r\n      }\r\n\r\n    return (\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Search</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={(e) => e.preventDefault()}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searched-name\">Trainer Name</Label>\r\n                            <Input type=\"text\" id=\"searched-name\" name=\"searched-name\" value={searchedName} onChange={(e) => {\r\n                                setSearchedName(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"searchedTopicID\">Assigned Topic:</Label>\r\n                            <select className=\"custom-select\" id=\"searchedTopicID\" name=\"searchedTopicID\" defaultValue={\"\"} value={searchedTopicID} onChange={(e) => {\r\n                                setSearchedTopicID(e.target.value)\r\n                            }} required>\r\n                                <option disabled value={\"\"}>--Topic--</option>\r\n                                {displayTopicOptions()}\r\n                            </select>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"info\" block onClick={resetValue}>Reset</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction TrainerList() {\r\n    const { loading, error, data } = useQuery(GET_TRAINERS)\r\n    const [searchedName, setSearchedName] = useState(\"\");\r\n    const [searchedTopicID, setSearchedTopicID] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n    let trainerList = data.trainers;\r\n\r\n    const pageObject = paginate(trainerList.length, currentPage, 6, 5)\r\n\r\n    const displayTrainerItems = () => {\r\n        trainerList = trainerSearchLogic(trainerList, {searchedName, searchedTopicID})\r\n        trainerList = paginateLogic(trainerList, pageObject)\r\n        return trainerList.map(trainerItem => {\r\n            return <TrainerItem key={trainerItem.id} trainerItem={trainerItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content\">\r\n                    <AddTrainer/>\r\n                </div>\r\n            </div>\r\n\r\n            <TrainerListSearchEngine searchedName={searchedName} setSearchedName={setSearchedName} searchedTopicID={searchedTopicID} setSearchedTopicID={setSearchedTopicID}/>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Date of Birth</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Email</th>\r\n                            {/*<th>Created Date</th>*/}\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayTrainerItems()}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    <PaginationComponent pageObject={pageObject} setCurrentPage={setCurrentPage}/>\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TrainerList\r\n","import React from 'react';\r\nimport client from \"../../config/client\";\r\n\r\nfunction Logout(props) {\r\n    const clearStore = async () => {\r\n        localStorage.removeItem(\"userID\");\r\n        await client.clearStore();\r\n        props.history.push(\"/\");\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {clearStore()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logout\r\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from \"./config/client\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport MessageContextProvider from \"./context/MessageContext\";\n\nimport SideNav from \"./components/Partial/SideNav\";\nimport TopNav from \"./components/Partial/TopNav\";\nimport Login from \"./components/User/Login\";\nimport Signup from \"./components/User/Signup\";\nimport Profile from \"./components/User/Profile\";\nimport CourseList from \"./components/Course/CourseList\";\nimport CourseDetails from \"./components/Course/CourseDetails\";\nimport TopicDetails from \"./components/Topic/TopicDetails\";\nimport StudentDetails from \"./components/Student/StudentDetails\";\nimport TrainerDetails from \"./components/Trainer/TrainerDetails\";\nimport ChangePassword from \"./components/User/ChangePassword\";\nimport TopicList from \"./components/Topic/TopicList\";\nimport StudentList from \"./components/Student/StudentList\";\nimport TrainerList from \"./components/Trainer/TrainerList\";\nimport Logout from \"./components/Partial/Logout\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Router>\n          <TopNav/>\n          <SideNav/>\n          <MessageContextProvider>\n          <main>\n            <Switch>\n              <Route path=\"/\" exact component={Login}/>\n              <Route path=\"/profile\" exact component={Profile}/>\n              <Route path=\"/courses\" exact component={CourseList}/>\n              <Route path=\"/courses/:courseID\" component={CourseDetails}/>\n              <Route path=\"/topics\" exact component={TopicList}/>\n              <Route path=\"/topics/:topicID\" component={TopicDetails}/>\n              <Route path=\"/students/:studentID\" component={StudentDetails}/>\n              <Route path=\"/trainers/:trainerID\" component={TrainerDetails}/>\n              <Route path=\"/students\" exact component={StudentList}/>\n              <Route path=\"/trainers\" exact component={TrainerList}/>\n              <Route path=\"/change-password\" exact component={ChangePassword}/>\n              <Route path=\"/logout\" exact component={Logout}/>\n              <Route path=\"/signup\" exact component={Signup}/>\n            </Switch>\n          </main>\n          </MessageContextProvider>\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}