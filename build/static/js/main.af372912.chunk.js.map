{"version":3,"sources":["config/client.js","context/MessageContext.js","queries/queries.js","components/Partial/SideNav.js","components/Partial/TopNav.js","components/User/Login.js","utils/dateParser.js","components/Partial/MessageAlert.js","components/Student/EditStudent.js","components/Trainer/EditTrainer.js","components/User/Profile.js","components/Course/EditCourse.js","components/Course/DeleteCourse.js","components/Course/CourseItem.js","components/Course/AddCourse.js","components/Course/AssignStudentToCourse.js","components/Course/CourseList.js","components/Course/CourseDetails.js","components/Topic/EditTopic.js","components/Topic/TopicDetails.js","components/Student/StudentDetails.js","components/Trainer/TrainerDetails.js","components/User/ChangePassword.js","components/Topic/DeleteTopic.js","components/Topic/TopicItem.js","components/Topic/AddTopic.js","components/Topic/AssignTrainerToTopic.js","components/Topic/TopicList.js","components/Student/DeleteStudent.js","components/Student/StudentItem.js","components/Student/AddStudent.js","components/Student/StudentList.js","components/Trainer/DeleteTrainer.js","components/Trainer/TrainerItem.js","components/Trainer/AddTrainer.js","components/Trainer/TrainerList.js","components/Partial/Logout.js","App.js","serviceWorker.js","index.js"],"names":["client","ApolloClient","uri","MessageContext","createContext","MessageContextProvider","props","useState","message","setMessage","messageType","setMessageType","visible","setVisible","Provider","value","children","GET_COURSES","gql","ADD_COURSE","DELETE_COURSE","UPDATE_COURSE","GET_TOPICS","ADD_TOPIC","DELETE_TOPIC","UPDATE_TOPIC","GET_STUDENTS","ADD_STUDENT","UPDATE_STUDENT","DELETE_STUDENT","GET_TRAINERS","ADD_TRAINER","UPDATE_TRAINER","DELETE_TRAINER","LOGIN","GET_USER_BY_ID","ASSIGN_STUDENT_TO_COURSE","ASSIGN_TRAINER_TO_TOPIC","GET_COURSE_BY_ID","GET_TOPIC_BY_ID","GET_STUDENT_BY_ID","GET_TRAINER_BY_ID","CHANGE_PASWORD","SideNav","userID","localStorage","getItem","userData","useQuery","variables","className","loading","error","data","getUserByID","role","email","displayProfile","to","displayNavLinks","TopNav","Navbar","color","light","expand","Container","aria-hidden","Login","history","push","window","location","reload","setEmail","password","setPassword","useMutation","login","onSubmit","e","a","preventDefault","loginData","console","log","id","setItem","Form","FormGroup","Label","htmlFor","Input","type","placeholder","name","required","onChange","target","Button","block","mS","dateParserWithMonth","dateItem","parsedDate","parseInt","dateObject","Date","y","getFullYear","m","getMonth","d","getDate","length","dateParserWithMonth_ISODate","parse","MessageAlert","useContext","theMessage","toggle","Modal","isOpen","ModalHeader","ModalBody","UncontrolledAlert","ModalFooter","onClick","EditStudent","studentItem","setName","address","setAddress","phone_number","setPhoneNumber","dob","setDob","coursesIDs","update","cache","updateStudent","students","readQuery","query","writeQuery","map","item","modal","setModal","studentID","href","includes","rows","EditTrainer","trainerItem","topicsIDs","profession","setProfession","updateTrainer","trainers","trainerID","Profile","student","trainer","style","marginBottom","courses","courseList","courseItem","key","topics","topicList","topicItem","title","EditCourse","updateCourse","courseID","DeleteCourse","courseData","deleteCourse","filter","onDelete","getCourseByID","participated_students","dipslayTopicList","displayParticipatedStudents","displayCourseDetails","CourseItem","created_date","AddCourse","addCourse","concat","AssignStudentToCourse","studentData","assignStudentToCourse","setCourseID","setStudentID","setTimeout","defaultValue","disabled","displayStudentSelect","selectedStudent","currentCourses","displayCourseSelect","CourseList","Table","hover","CourseDetails","match","params","assignedTrainers","displayUtilBox","forEach","assigned_trainers","index","EditTopic","setTitle","courseQueryObject","updateTopic","topicID","TopicDetails","getTopicByID","course","StudentDetails","getStudentByID","user","TrainerDetails","getTrainerByID","ChangePassword","oldPassword","setOldPassword","newPassword","setNewPassword","change_password","DeleteTopic","topicData","deleteTopic","displayAssignedTrainers","displayTopicDetails","TopicItem","AddTopic","addTopic","AssignTrainerToTopic","trainerData","assignTrainerToTopic","setTrainerID","setTopicID","displayTrainerSelect","currentTopics","selectedTrainer","displayTopicSelect","TopicList","DeleteStudent","deleteStudent","dipslayCourseList","displayStudentDetails","StudentItem","AddStudent","setCoursesIDs","addStudent","resetValue","StudentList","DeleteTrainer","deleteTrainer","displayTrainerDetails","TrainerItem","AddTrainer","setTopicsIDs","addTrainer","TrainerList","Logout","clearStore","removeItem","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.af372912.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\nconst MAIN_PROXY_URL = \"https://node-js-sms-backend-123.herokuapp.com/\"\r\n\r\nconst client = new ApolloClient({\r\n  uri: MAIN_PROXY_URL,\r\n});\r\n\r\nexport default client;","import React, {createContext, useState} from 'react';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nfunction MessageContextProvider(props) {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messageType, setMessageType] = useState(\"\");\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    return (\r\n        <MessageContext.Provider value={{message, visible, messageType, setMessage, setMessageType, setVisible}}>\r\n            {props.children}\r\n        </MessageContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MessageContextProvider\r\n","import {\r\n  gql\r\n} from \"apollo-boost\";\r\n\r\nexport const GET_COURSES = gql `\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n      created_date\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_COURSE = gql `\r\nmutation ($name: String!){\r\n    addCourse(name: $name){\r\n        id\r\n        name\r\n        created_date\r\n      }\r\n}\r\n`;\r\n\r\nexport const DELETE_COURSE = gql `\r\nmutation ($courseID: ID!){\r\n    deleteCourse(courseID: $courseID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_COURSE = gql `\r\nmutation ($courseID: ID!, $name: String){\r\n    updateCourse(courseID: $courseID, name: $name) {\r\n      id\r\n      name\r\n      created_date\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_TOPICS = gql `\r\nquery {\r\n  topics {\r\n    id\r\n    title\r\n    created_date\r\n    courseID\r\n    course {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_TOPIC = gql `\r\nmutation ($title: String!, $courseID: ID!){\r\n    addTopic(title: $title, courseID: $courseID){\r\n      id\r\n      title\r\n      created_date\r\n      courseID\r\n      course {\r\n        id\r\n        name\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\nexport const DELETE_TOPIC = gql `\r\nmutation ($topicID: ID!){\r\n    deleteTopic(topicID: $topicID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_TOPIC = gql `\r\nmutation ($topicID: ID!, $title: String, $courseID: ID){\r\n    updateTopic(topicID: $topicID, courseID: $courseID, title: $title) {\r\n      id\r\n      title\r\n      created_date\r\n      courseID\r\n      course {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_STUDENTS = gql `\r\nquery {\r\n  students {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_STUDENT = gql `\r\nmutation ($name: String!, $dob: String!\r\n  , $phone_number: String!, \r\n  $address: String!,\r\n  $email: String!,\r\n  $password: String!,\r\n  $coursesIDs: [String]){\r\n  addStudent(name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  coursesIDs: $coursesIDs,\r\n  email: $email,\r\n  password: $password) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const UPDATE_STUDENT = gql `\r\nmutation ($studentID: ID!, \r\n  $name: String, \r\n  $dob: String\r\n  , $phone_number: String, \r\n  $address: String,\r\n  $coursesIDs: [String]\r\n  ){\r\n  updateStudent(studentID: $studentID\r\n    , name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  coursesIDs: $coursesIDs) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n  mutation ($studentID: ID!) {\r\n    deleteStudent(studentID: $studentID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_TRAINERS = gql `\r\nquery {\r\n  trainers {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    profession\r\n    topicsIDs\r\n    topics {\r\n      title\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ADD_TRAINER = gql `\r\nmutation ($name: String!,\r\n  $dob: String!,\r\n  $phone_number: String!,\r\n  $address: String!,\r\n  $topicsIDs: [String],\r\n  $email: String!,\r\n  $password: String!,\r\n  $profession: String!){\r\n\r\n  addTrainer(name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  topicsIDs: $topicsIDs,\r\n  email: $email,\r\n  password: $password,\r\n  profession: $profession) {\r\n    id\r\n    name\r\n      dob\r\n      address\r\n      phone_number\r\n      profession\r\n      topicsIDs\r\n      topics {\r\n        title\r\n      }\r\n      user {\r\n        email\r\n      }\r\n  }\r\n}\r\n`\r\n\r\nexport const UPDATE_TRAINER = gql `\r\nmutation ($trainerID: ID!, \r\n  $name: String,\r\n  $dob: String,\r\n  $phone_number: String,\r\n  $address: String,\r\n  $topicsIDs: [String],\r\n  $profession: String){\r\n\r\n  updateTrainer(trainerID: $trainerID, \r\n  name: $name,\r\n  dob: $dob,\r\n  phone_number: $phone_number,\r\n  address: $address,\r\n  topicsIDs: $topicsIDs,\r\n  profession: $profession) {\r\n    id\r\n    name\r\n      dob\r\n      address\r\n      topicsIDs\r\n      phone_number\r\n      profession\r\n      topics {\r\n        title\r\n      }\r\n      user {\r\n        email\r\n      }\r\n  }\r\n}\r\n`\r\n\r\nexport const DELETE_TRAINER = gql `\r\n  mutation ($trainerID: ID!) {\r\n    deleteTrainer(trainerID: $trainerID) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN = gql `\r\nmutation ($email: String!, $password: String!){\r\n  login (email: $email, password: $password){\r\n    id\r\n    role\r\n    student {\r\n      name\r\n    }\r\n    trainer {\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_USER_BY_ID = gql`\r\nquery ($userID: ID!){\r\n  getUserByID(userID: $userID) {\r\n    id\r\n    role\r\n    email\r\n    student {\r\n      id\r\n      name\r\n      dob\r\n      address\r\n      coursesIDs\r\n      phone_number\r\n      courses {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    trainer {\r\n      id\r\n      name\r\n      dob\r\n      address\r\n      topicsIDs\r\n      phone_number\r\n      profession\r\n      topics {\r\n        title\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ASSIGN_STUDENT_TO_COURSE = gql`\r\nmutation ($courseID: ID!, $studentID: ID!){\r\n  assignStudentToCourse(courseID: $courseID, studentID: $studentID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const ASSIGN_TRAINER_TO_TOPIC = gql`\r\nmutation ($trainerID: ID!, $topicID: ID!){\r\n  assignTrainerToTopic(trainerID: $trainerID, topicID: $topicID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    topicsIDs\r\n    topics {\r\n      title\r\n      id\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_COURSE_BY_ID = gql`\r\nquery ($courseID: ID!){\r\n  getCourseByID(courseID: $courseID){\r\n    id\r\n    name\r\n    created_date\r\n    topics {\r\n      title\r\n      id\r\n      assigned_trainers {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    participated_students {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_TOPIC_BY_ID = gql`\r\nquery ($topicID: ID!){\r\n  getTopicByID(topicID: $topicID){\r\n    id\r\n    title\r\n    created_date\r\n    courseID\r\n    assigned_trainers {\r\n      name\r\n      id\r\n    }\r\n    course {\r\n      id\r\n      name\r\n      participated_students {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_STUDENT_BY_ID = gql`\r\nquery ($studentID: ID!){\r\n  getStudentByID(studentID: $studentID){\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    created_date\r\n    coursesIDs\r\n    user {\r\n      email\r\n    }\r\n    courses {\r\n      name\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_TRAINER_BY_ID = gql `\r\nquery ($trainerID: ID!) {\r\n  getTrainerByID(trainerID: $trainerID) {\r\n    id\r\n    name\r\n    dob\r\n    address\r\n    phone_number\r\n    profession\r\n    created_date\r\n    topicsIDs\r\n    topics {\r\n      title\r\n      id\r\n    }\r\n    user {\r\n      email\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const CHANGE_PASWORD = gql`\r\n  mutation ($userID: ID!, $oldPassword: String!, $newPassword: String!) {\r\n    changePassword(userID: $userID, oldPassword: $oldPassword, newPassword: $newPassword) {\r\n      id\r\n    }\r\n  }\r\n`\r\n ","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_USER_BY_ID} from \"../../queries/queries\";\r\n\r\nfunction SideNav() {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n\r\n    const displayNavLinks = () => {\r\n        const {loading, error} = userData;\r\n\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return (\r\n            <>\r\n                <li>\r\n                    <Link to=\"/\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            </>\r\n        )\r\n\r\n        const {role} = userData.data.getUserByID;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/profile\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/courses\">\r\n                            Courses\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/topics\">\r\n                            Topics\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/trainers\">\r\n                            Trainers\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/students\">\r\n                            Students\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"text-danger\" to=\"/logout\">\r\n                            Logout\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        } else if (role === \"Student\" || role === \"Trainer\") {\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/profile\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"text-danger\" to=\"/logout\">\r\n                            Logout\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <li>\r\n                        <Link to=\"/\">\r\n                            Login\r\n                        </Link>\r\n                    </li>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const displayProfile = () => {\r\n        const {loading, error} = userData;\r\n\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return (\r\n            <div className=\"profile\">\r\n                <h4>No user has been specified</h4>\r\n                <h6>Please login</h6>\r\n            </div>\r\n        )\r\n\r\n        const {role, email} = userData.data.getUserByID;\r\n        return (\r\n            <div className=\"profile\">\r\n                <h4>{email}</h4>\r\n                <h6>{role}</h6>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"side-nav\">\r\n\r\n            <div className=\"close-nav-btn\">\r\n                X\r\n            </div>\r\n            \r\n            {displayProfile()}\r\n\r\n            <div className=\"side-nav-list\">\r\n                <ul>\r\n                    {displayNavLinks()}\r\n                </ul>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNav\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  Container\r\n} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst TopNav = (props) => {\r\n  return (\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <Container>\r\n            <Link to=\"/\" className=\"navbar-brand\">Course Management System</Link>\r\n            <div className=\"nav-btn\">\r\n                <i className=\"fas fa-bars fa-2x\" aria-hidden=\"true\"></i>\r\n            </div>\r\n        </Container>\r\n      </Navbar>\r\n  );\r\n}\r\n\r\nexport default TopNav;","import React, {useState} from 'react';\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {LOGIN} from \"../../queries/queries\";\r\nimport {Form, FormGroup, Input, Button, Label, Container} from \"reactstrap\"\r\n\r\nfunction Login(props) {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    if (userID){\r\n        props.history.push(\"/profile\");\r\n        window.location.reload();\r\n    }\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login, { data }] = useMutation(LOGIN);\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const loginData = await login({ variables: { email, password } });\r\n        console.log(loginData)\r\n        if (loginData.data.login.id){\r\n            localStorage.setItem(\"userID\", loginData.data.login.id);\r\n            props.history.push(\"/profile\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Login</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={onSubmit}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"email\">Email:</Label>\r\n                            <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                                setEmail(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"password\">Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                                setPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"dark\" block type=\"submit\">Login</Button>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","var mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\nexport const dateParser = (dateItem) => {\r\n    const parsedDate = parseInt(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = \"\" + dateObject.getMonth();\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (m.length === 1){\r\n        m = \"0\" + m;\r\n    }\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${y}-${m}-${d}`;\r\n}\r\n\r\nexport const dateParserWithMonth = (dateItem) => {\r\n    const parsedDate = parseInt(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = mS[dateObject.getMonth()];\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${d}-${m}-${y}`;\r\n}\r\n\r\nexport const dateParserWithMonth_ISODate = (dateItem) => {\r\n    const parsedDate = Date.parse(dateItem);\r\n\r\n    const dateObject = new Date(parsedDate);\r\n\r\n    let y = \"\" + dateObject.getFullYear();\r\n    let m = mS[dateObject.getMonth()];\r\n    let d = \"\" + dateObject.getDate();\r\n\r\n    if (d.length === 1){\r\n        d = \"0\" + d;\r\n    }\r\n\r\n    return `${d}-${m}-${y}`;\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { UncontrolledAlert, Modal, ModalFooter, ModalBody, ModalHeader, Button } from 'reactstrap';\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\n\r\nconst MessageAlert = (props) => {\r\n    const {message, messageType, visible, setVisible} = useContext(MessageContext)\r\n    const theMessage = message;\r\n\r\n    if (!message) return <></>\r\n\r\n    const toggle = () => {\r\n      setVisible(false);\r\n    }\r\n\r\n  return (\r\n    <Modal isOpen={visible} toggle={toggle}>\r\n      <ModalHeader toggle={toggle}></ModalHeader>\r\n        <ModalBody>\r\n          <UncontrolledAlert color={messageType}>\r\n            {theMessage}\r\n          </UncontrolledAlert>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default MessageAlert;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_STUDENT, GET_STUDENTS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditStudent = (props) => {\r\n    const {\r\n        className,\r\n        studentItem\r\n      } = props;\r\n\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(studentItem.name);\r\n    const [address, setAddress] = useState(studentItem.address);\r\n    const [phone_number, setPhoneNumber] = useState(studentItem.phone_number);\r\n    const [dob, setDob] = useState(studentItem.dob);\r\n    const [coursesIDs, setCoursesIDs] = useState(studentItem.coursesIDs);\r\n    const [updateStudent, { data }] = useMutation(UPDATE_STUDENT, {\r\n        update(cache, { data: { updateStudent } }) {\r\n          const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n          cache.writeQuery({\r\n            query: GET_STUDENTS,\r\n            data: { data: { students: students.map(item => {\r\n                if (item.id == updateStudent.id) {\r\n                    return updateStudent;\r\n                } \r\n                return item;\r\n            }) }, },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await updateStudent({ variables: { studentID: studentItem.id, name, address, dob, phone_number, coursesIDs } });\r\n    const url = window.location.href;\r\n    if (url.includes(\"profile\")){\r\n      setMessage(\"Successfully updated. Please reload to take effect\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    } else {\r\n      setMessage(\"Successfully updated\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Student</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditStudent;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_TRAINER, GET_TRAINERS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditTrainer = (props) => {\r\n    const {\r\n        className,\r\n        trainerItem\r\n      } = props;\r\n\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(trainerItem.name);\r\n    const [address, setAddress] = useState(trainerItem.address);\r\n    const [phone_number, setPhoneNumber] = useState(trainerItem.phone_number);\r\n    const [dob, setDob] = useState(trainerItem.dob);\r\n    const [topicsIDs, setTopicsIDs] = useState(trainerItem.topicsIDs);\r\n    const [profession, setProfession] = useState(trainerItem.profession);\r\n    const [updateTrainer, { data }] = useMutation(UPDATE_TRAINER, {\r\n        update(cache, { data: { updateTrainer } }) {\r\n          const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n          cache.writeQuery({\r\n            query: GET_TRAINERS,\r\n            data: { data: { trainers: trainers.map(item => {\r\n                if (item.id == updateTrainer.id) {\r\n                    return updateTrainer;\r\n                } \r\n                return item;\r\n            }) }, },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await updateTrainer({ variables: { trainerID: trainerItem.id, name, address, dob, phone_number, topicsIDs, profession } });\r\n    const url = window.location.href;\r\n    if (url.includes(\"profile\")){\r\n      setMessage(\"Successfully updated. Please reload to take effect\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    } else {\r\n      setMessage(\"Successfully updated\");\r\n      setMessageType(\"success\");\r\n      setVisible(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Trainer</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"profession\">Profession:</Label>\r\n                    <Input type=\"text\" placeholder=\"Profession\" id=\"profession\" name=\"profession\" required value={profession} onChange={e => {\r\n                        setProfession(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTrainer;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport {Container} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditStudent from \"../Student/EditStudent\";\r\nimport EditTrainer from \"../Trainer/EditTrainer\";\r\n\r\nfunction Profile(props) {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const { loading, error, data } = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {role, email, student, trainer} = data.getUserByID;\r\n\r\n    const displayUpdateButtons = () => {\r\n        if (role === \"Admin\") {\r\n            return \"\";\r\n        } else if (role === \"Student\") {\r\n            return <EditStudent studentItem={student}/>\r\n        } else if (role === \"Trainer\") {\r\n            return <EditTrainer trainerItem={trainer}/>\r\n        } \r\n    }\r\n\r\n    const displayProfile = () => {\r\n        if (role === \"Admin\") {\r\n            return (\r\n                <div>\r\n                    \r\n                </div>\r\n            )\r\n        } else if (role === \"Student\") {\r\n            const {name, dob, address, phone_number, courses} = student\r\n            const courseList = courses.length === 0 ? (\r\n                <ul>\r\n                    <li>\r\n                        Nothing to learn\r\n                    </li>\r\n                </ul>\r\n            ) : (\r\n                <ul>\r\n                    {courses.map(courseItem => {\r\n                    return <li key={courseItem.id} >\r\n                                <Link to={`/courses/${courseItem.id}`}>\r\n                                {courseItem.name}\r\n                                </Link>\r\n                            </li>\r\n                    })}\r\n                </ul>\r\n            )\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Name:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{name}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Date of Birth:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Address:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{address}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Phone Number:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{phone_number}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Email:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        <p>{email}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                        <p><b>Participated Courses:</b></p>\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                        {courseList}\r\n                    </div>\r\n\r\n                    </div>               \r\n                </div>\r\n            )\r\n        } else if (role === \"Trainer\") {\r\n            const {name, dob, address, phone_number, topics, profession} = trainer\r\n            const topicList = topics.length === 0 ? (\r\n                <ul>\r\n                    <li>\r\n                        Nothing to teach\r\n                    </li>\r\n                </ul>\r\n            ) : (\r\n                <ul>\r\n                    {topics.map(topicItem => {\r\n                    return <li key={topicItem.id} >\r\n                                <Link to={`/topics/${topicItem.id}`}>\r\n                                {topicItem.title}\r\n                                </Link>\r\n                            </li>\r\n                    })}\r\n                </ul>\r\n            )\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{email}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Profession:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{profession}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            {topicList}\r\n                        </div>\r\n\r\n                    </div>               \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Profile</h2>\r\n                <div className=\"box-content\">\r\n                    <h4>Logged in as {email}</h4>\r\n                    <h6 style={{marginBottom: \"30px\"}}>{role}</h6>\r\n                    {displayProfile()}\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Configuration</h2>\r\n                <div className=\"box-content util-box align-items-center\">\r\n                    <Link to=\"/change-password\" className=\"btn btn-primary\">Change Password</Link>\r\n                    {displayUpdateButtons()}\r\n                    <Link to=\"/logout\" className=\"btn btn-danger\">Logout</Link>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {UPDATE_COURSE, GET_COURSES} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditCourse = (props) => {\r\n    const {courseItem} = props;\r\n    const [name, setName] = useState(courseItem.name);\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [updateCourse, { data }] = useMutation(UPDATE_COURSE, {\r\n        update(cache, { data: { updateCourse } }) {\r\n          const { courses } = cache.readQuery({ query: GET_COURSES })\r\n          cache.writeQuery({\r\n            query: GET_COURSES,\r\n            data: { courses: courses.map(item => {\r\n                if (item.id == updateCourse.id) {\r\n                    return updateCourse;\r\n                } \r\n                return item;\r\n            }) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await updateCourse({ variables: { name, courseID: courseItem.id } });\r\n    setMessage(\"Successfully updated\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Course Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Course Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCourse;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_COURSE_BY_ID, GET_COURSES, DELETE_COURSE} from \"../../queries/queries\";\r\n\r\nconst DeleteCourse = (props) => {\r\n  const {\r\n    className,\r\n    courseID\r\n  } = props;\r\n  const courseData = useQuery(GET_COURSE_BY_ID, {\r\n      variables: {\r\n        courseID\r\n      }\r\n  })\r\n  const [deleteCourse, { data }] = useMutation(DELETE_COURSE, {\r\n    update(cache, { data: { deleteCourse } }) {\r\n      const { courses } = cache.readQuery({ query: GET_COURSES })\r\n      cache.writeQuery({\r\n        query: GET_COURSES,\r\n        data: { courses: courses.filter(item => {\r\n            return item.id !== deleteCourse.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayTopicList  = (topics) => {\r\n    if (topics.length === 0){\r\n        return <li key={\"LOL\"}>No topic has assigned to this course</li>\r\n    } else {\r\n        return topics.map(topicItem => {\r\n            return <li key={topicItem.id}>{topicItem.title}</li>\r\n        })\r\n    }\r\n}\r\n\r\n    const displayParticipatedStudents = (participated_students) => {\r\n        if (participated_students.length === 0){\r\n            return <li key={\"LOL2\"}>No student has participated in this course</li>\r\n        } else {\r\n            return participated_students.map(studentItem => {\r\n                return <li key={studentItem.id}>{studentItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n  const displayCourseDetails = () => {\r\n    const {loading, error, data} = courseData\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, topics, participated_students} = data.getCourseByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Topics:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayTopicList(topics)}\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Participated Students:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {displayParticipatedStudents(participated_students)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteCourse({ variables: { courseID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Course</ModalHeader>\r\n        <ModalBody>\r\n            {displayCourseDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteCourse;","import React from 'react';\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport EditCourse from \"./EditCourse\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DeleteCourse from \"./DeleteCourse\";\r\n\r\nfunction CourseItem(props) {\r\n    const {courseItem} = props;\r\n    const {name, created_date, id} = props.courseItem;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/courses/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth(created_date)}</td>\r\n            <td className=\"utils\">\r\n                <EditCourse courseItem={courseItem}/>\r\n                <DeleteCourse courseID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default CourseItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_COURSE, GET_COURSES} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddCourse = (props) => {\r\n    const {\r\n      className\r\n    } = props;\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(\"\");\r\n    const [addCourse, { data }] = useMutation(ADD_COURSE, {\r\n        update(cache, { data: { addCourse } }) {\r\n          console.log(addCourse);\r\n          const { courses } = cache.readQuery({ query: GET_COURSES })\r\n          cache.writeQuery({\r\n            query: GET_COURSES,\r\n            data: { courses: courses.concat([addCourse]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await addCourse({ variables: { name } });\r\n    setName(\"\");\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Course</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Course Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Course Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCourse;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENTS, GET_COURSES, ASSIGN_STUDENT_TO_COURSE} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AssignStudentToCourse = (props) => {\r\n    const courseData = useQuery(GET_COURSES)\r\n    const studentData = useQuery(GET_STUDENTS)\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [assignStudentToCourse, assignData] = useMutation(ASSIGN_STUDENT_TO_COURSE, {\r\n      update(cache, { data: { assignStudentToCourse } }) {\r\n        const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n        cache.writeQuery({\r\n          query: GET_STUDENTS,\r\n          data: { students: students.map(item => {\r\n            if (item.id === assignStudentToCourse.id) {\r\n                return assignStudentToCourse;\r\n            } \r\n            return item;\r\n        }) },\r\n        });\r\n      }\r\n    })\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    \r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const displayCourseSelect = () => {\r\n    const { loading, error, data } = courseData;\r\n\r\n    if (loading || studentData.loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error || studentData.error) return <option disabled>{error.message}</option>;\r\n\r\n    let selectedStudent;\r\n    let currentCourses = data.courses;\r\n\r\n    if (studentID){\r\n      selectedStudent = studentData.data.students.filter(studentItem => {\r\n        return studentItem.id === studentID\r\n      })[0];\r\n\r\n      currentCourses = currentCourses.filter(courseItem => {\r\n        return !selectedStudent.coursesIDs.includes(courseItem.id)\r\n      })\r\n    }\r\n\r\n    if (currentCourses.length === 0){\r\n      return <option disabled key={\"LOL3\"}>\r\n            No student has been specified or this student has participated in all available courses\r\n          </option> \r\n    }\r\n\r\n    return currentCourses.map(courseItem => {\r\n          return <option value={courseItem.id} key={courseItem.id}>\r\n            {courseItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayStudentSelect = () => {\r\n    const { loading, error, data } = studentData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentStudents = data.students;\r\n\r\n    return currentStudents.map(studentItem => {\r\n          return <option value={studentItem.id} key={studentItem.id}>\r\n            {studentItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await assignStudentToCourse({variables: {courseID, studentID}})\r\n    setCourseID(\"\");\r\n    setStudentID(\"\");\r\n    setMessage(\"Successfully assigned\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Assign Student To Course</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Assign Student To Course</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n            <MessageAlert/>\r\n\r\n            <FormGroup>\r\n              <Label htmlFor=\"studentID\">Student:</Label>\r\n              <select className=\"custom-select\" id=\"studentID\" name=\"studentID\" defaultValue={\"\"} value={studentID} onChange={(e) => {\r\n                setStudentID(e.target.value)\r\n              }}>\r\n                <option value={\"\"} disabled>--Student--</option>\r\n              {displayStudentSelect()}\r\n              </select>\r\n            </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                      setCourseID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Course--</option>\r\n                    {displayCourseSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Assign</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignStudentToCourse;","import React, {useEffect} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSES} from \"../../queries/queries\";\r\nimport CourseItem from \"./CourseItem\";\r\nimport AddCourse from \"./AddCourse\";\r\nimport AssignStudentToCourse from \"./AssignStudentToCourse\";\r\nimport {Table, Container} from \"reactstrap\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nfunction CourseList() {\r\n    const { loading, error, data } = useQuery(GET_COURSES);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const displayCourseItems = () => {\r\n        return data.courses.map(courseItem => {\r\n            return <CourseItem key={courseItem.id} courseItem={courseItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    <AddCourse/>\r\n                    <AssignStudentToCourse/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Created Date</th>\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayCourseItems()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CourseList\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSE_BY_ID, GET_COURSES, GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditCourse from \"./EditCourse\";\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction CourseDetails(props) {\r\n    const courseID = props.match.params.courseID;\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const courseData = useQuery(GET_COURSES);\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n    const { loading, error, data } = useQuery(GET_COURSE_BY_ID, {\r\n        variables: {courseID},\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const courseItem = data.getCourseByID;\r\n    const {name, created_date, topics, participated_students} = courseItem;\r\n    let assignedTrainers = [];\r\n\r\n    const dipslayTopicList  = () => {\r\n        if (topics.length === 0){\r\n            return <li key={\"LOL\"}>No topic has assigned to this course</li>\r\n        } else {\r\n            return topics.map(topicItem => {\r\n                return <li key={topicItem.id}><Link to={`/topics/${topicItem.id}`}>{topicItem.title}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    const displayAssignedTrainers = () => {\r\n        topics.forEach(topicItem => {\r\n            const {assigned_trainers} = topicItem;\r\n            assigned_trainers.forEach(trainerItem => {\r\n                if (!assignedTrainers.includes(trainerItem.name)){\r\n                    assignedTrainers.push(trainerItem.name);\r\n                }\r\n            })\r\n        });\r\n        if (assignedTrainers.length === 0){\r\n            return <li key={\"LOL1\"}>No trainer has been assigned</li>\r\n        } else {\r\n            return assignedTrainers.map((trainerItem, index) => {\r\n                return <li key={`${name}-${index}`}>{trainerItem}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayParticipatedStudents = () => {\r\n        console.log(participated_students)\r\n        if (participated_students.length === 0){\r\n            return <li key={\"LOL2\"}>No student has participated in this course</li>\r\n        } else {\r\n            return participated_students.map(studentItem => {\r\n                return <li key={studentItem.id}>{studentItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayUtilBox = () => {\r\n        const {role} = userData.data.getUserByID;\r\n        if (userData.loading) return <p>Loading...</p>;\r\n        if (userData.error) return <p>{userData.error.message}</p>;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditCourse courseItem={courseItem}/>*/}\r\n                    <Link to=\"/courses\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n            )\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            \r\n                {displayUtilBox()}\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayTopicList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Trainers:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayAssignedTrainers()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Participated Students:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayParticipatedStudents()}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CourseDetails\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {UPDATE_TOPIC, GET_COURSES, GET_TOPICS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst EditTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const {topicItem} = props\r\n    const [title, setTitle] = useState(topicItem.title);\r\n    const [courseID, setCourseID] = useState(topicItem.courseID);\r\n    const courseQueryObject = useQuery(GET_COURSES);\r\n    let {loading, error} = courseQueryObject;\r\n    const [updateTopic, { data }] = useMutation(UPDATE_TOPIC, {\r\n        update(cache, { data: { updateTopic } }) {\r\n          const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n          cache.writeQuery({\r\n            query: GET_TOPICS,\r\n            data: { topics: topics.map(item => {\r\n                if (item.id == updateTopic.id) {\r\n                    return updateTopic;\r\n                } \r\n                return item;\r\n            }) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await updateTopic({ variables: { topicID: topicItem.id, title, courseID } });\r\n    setMessage(\"Successfully updated\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n  }\r\n\r\n  const displayCourseOptions = (e) => {\r\n    if (loading) {\r\n        return <option>Loading</option>\r\n    } else if (error) {\r\n        return <option>Error</option>\r\n    } else {\r\n        let courseData = courseQueryObject.data;\r\n        return courseData.courses.map(item => {\r\n            return <option value={item.id}>{item.name}</option>\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"warning\" onClick={toggle}>Update</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Update Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"title\">Topic Title:</Label>\r\n                    <Input type=\"text\" placeholder=\"Topic Title\" id=\"title\" name=\"title\" required value={title} onChange={e => {\r\n                        setTitle(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={courseID} value={courseID} onChange={(e) => {\r\n                        setCourseID(e.target.value)\r\n                    }} required>\r\n                        <option disabled value={\"\"}>--Course--</option>\r\n                        {displayCourseOptions()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Update</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTopic;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TOPIC_BY_ID, GET_TOPICS, GET_USER_BY_ID} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditTopic from \"./EditTopic\";\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction TopicDetails(props) {\r\n    const topicID = props.match.params.topicID;\r\n    const userID = localStorage.getItem(\"userID\");\r\n    const topicData = useQuery(GET_TOPICS);\r\n    const userData = useQuery(GET_USER_BY_ID, {\r\n        variables: {userID}\r\n    });\r\n    const { loading, error, data } = useQuery(GET_TOPIC_BY_ID, {\r\n        variables: {topicID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const topicItem = data.getTopicByID;\r\n    const {title, created_date, course, assigned_trainers} = topicItem;\r\n\r\n    const displayAssignedTrainers = () => {\r\n        if (assigned_trainers.length === 0){\r\n            return <li key={\"LOL2\"}>No trainer has been assigned to this topic</li>\r\n        } else {\r\n            return assigned_trainers.map(trainerItem => {\r\n                return <li key={trainerItem.id}>{trainerItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    const displayUtilBox = () => {\r\n        const {role} = userData.data.getUserByID;\r\n        if (userData.loading) return <p>Loading...</p>;\r\n        if (userData.error) return <p>{userData.error.message}</p>;\r\n        if (role === \"Admin\"){\r\n            return (\r\n                <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditTopic topicItem={topicItem}/>*/}\r\n                    <Link to=\"/topics\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n            )\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            \r\n            {displayUtilBox()}\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                            \r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{title}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Course:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><Link to={`/courses/${course.id}`}>{course.name}</Link></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Trainers:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {displayAssignedTrainers()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TopicDetails\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENT_BY_ID, GET_STUDENTS} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditStudent from \"./EditStudent\";\r\nimport {dateParserWithMonth_ISODate, dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction StudentDetails(props) {\r\n    const studentID = props.match.params.studentID;\r\n    const studentData = useQuery(GET_STUDENTS);\r\n    const { loading, error, data } = useQuery(GET_STUDENT_BY_ID, {\r\n        variables: {studentID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const studentItem = data.getStudentByID;\r\n    const {name, created_date, dob, address, phone_number, courses, user} = studentItem;\r\n\r\n    const dipslayCourseList = () => {\r\n        if (courses.length === 0){\r\n            return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n        } else {\r\n            return courses.map(courseItem => {\r\n                return <li key={courseItem.id}><Link to={`/courses/${courseItem.id}`}>{courseItem.name}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            \r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditStudent studentItem={studentItem}/>*/}\r\n                    <Link to=\"/students\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><a href={`mailto:${user.email}`}>{user.email}</a></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Participated Courses:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayCourseList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StudentDetails\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TRAINER_BY_ID, GET_TRAINERS} from \"../../queries/queries\";\r\nimport { Container } from 'reactstrap';\r\nimport EditTrainer from \"./EditTrainer\";\r\nimport {dateParserWithMonth_ISODate, dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction TrainerDetails(props) {\r\n    const trainerID = props.match.params.trainerID;\r\n    const trainerData = useQuery(GET_TRAINERS);\r\n    const { loading, error, data } = useQuery(GET_TRAINER_BY_ID, {\r\n        variables: {trainerID}\r\n    })\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const trainerItem = data.getTrainerByID;\r\n    const {name, created_date, dob, address, phone_number, profession, topics, user} = trainerItem;\r\n    console.log(trainerItem)\r\n\r\n    const dipslayTopicList = () => {\r\n        if (topics.length === 0){\r\n            return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n        } else {\r\n            return topics.map(topicItem => {\r\n                return <li key={topicItem.id}><Link to={`/topics/${topicItem.id}`}>{topicItem.title}</Link></li>\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            \r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    {/*<EditTrainer trainerItem={trainerItem}/>*/}\r\n                    <Link to=\"/trainers\" className=\"btn btn-dark\">Back To List</Link>\r\n                </div>\r\n            </div>\r\n\r\n                <div className=\"box\">\r\n                    <h2 className=\"box-title\">Data</h2>\r\n                    <div className=\"box-content\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Name:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{name}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Profession:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{profession}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Date of Birth:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth_ISODate(dob)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Address:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{address}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Phone Number:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{phone_number}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Email:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p><a href={`mailto:${user.email}`}>{user.email}</a></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Created Date:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <p>{dateParserWithMonth(created_date)}</p>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 col-sm-6 details-title\">\r\n                            <p><b>Assigned Topics:</b></p>\r\n                        </div>\r\n                        <div className=\"col-lg-9 col-md-6 col-sm-6 details-data\">\r\n                            <ul>\r\n                                {dipslayTopicList()}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TrainerDetails\r\n","import React, {useState} from 'react';\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {CHANGE_PASWORD} from \"../../queries/queries\";\r\nimport {Form, FormGroup, Input, Button, Label, Container} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction ChangePassword(props) {\r\n    const [oldPassword, setOldPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [change_password, { data }] = useMutation(CHANGE_PASWORD);\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const userID = localStorage.getItem(\"userID\");\r\n        change_password({\r\n            variables: {userID, oldPassword, newPassword}\r\n        })\r\n        props.history.push(\"/logout\");\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Change Password</h2>\r\n                <div className=\"box-content\">\r\n                    <Form onSubmit={onSubmit}>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"oldPassword\">Old Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"Old Password\" id=\"oldPassword\" name=\"oldPassword\" required value={oldPassword} onChange={e => {\r\n                                setOldPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label htmlFor=\"newPassword\">New Password:</Label>\r\n                            <Input type=\"password\" placeholder=\"New Password\" id=\"newPassword\" name=\"newPassword\" required value={newPassword} onChange={e => {\r\n                                setNewPassword(e.target.value)\r\n                            }}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Button color=\"dark\" block type=\"submit\">Change Password</Button>\r\n                            <Link to=\"/profile\" className=\"btn btn-info btn-block mt-2\">Back To Profile</Link>\r\n                        </FormGroup>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChangePassword\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_TOPICS, GET_TOPIC_BY_ID, DELETE_TOPIC} from \"../../queries/queries\";\r\n\r\nconst DeleteTopic = (props) => {\r\n  const {\r\n    className,\r\n    topicID\r\n  } = props;\r\n  const topicData = useQuery(GET_TOPIC_BY_ID, {\r\n      variables: {\r\n        topicID\r\n      }\r\n  })\r\n  const [deleteTopic, { data }] = useMutation(DELETE_TOPIC, {\r\n    update(cache, { data: { deleteTopic } }) {\r\n      const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n      cache.writeQuery({\r\n        query: GET_TOPICS,\r\n        data: { topics: topics.filter(item => {\r\n            return item.id !== deleteTopic.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n    const displayAssignedTrainers = (assigned_trainers) => {\r\n        if (assigned_trainers.length === 0){\r\n            return <li key={\"LOL2\"}>No trainer has been assigned to this topic</li>\r\n        } else {\r\n            return assigned_trainers.map(trainerItem => {\r\n                return <li key={trainerItem.id}>{trainerItem.name}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n  const displayTopicDetails = () => {\r\n    const {loading, error, data} = topicData\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {title, course, assigned_trainers} = data.getTopicByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Title:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{title}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Course:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {course.name}\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Assigned Trainers:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {displayAssignedTrainers(assigned_trainers)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteTopic({ variables: { topicID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Topic</ModalHeader>\r\n        <ModalBody>\r\n            {displayTopicDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteTopic;","import React from 'react';\r\nimport {dateParserWithMonth} from \"../../utils/dateParser\";\r\nimport EditTopic from \"./EditTopic\";\r\nimport {Link} from \"react-router-dom\"\r\nimport DeleteTopic from \"./DeleteTopic\";\r\n\r\nfunction TopicItem(props) {\r\n    const {topicItem} = props;\r\n    const {title, course, created_date, id} = props.topicItem;\r\n    const {name} = course;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/topics/${id}`}>{title}</Link></td>\r\n            <td>{name}</td>\r\n            <td>{dateParserWithMonth(created_date)}</td>\r\n            <td className=\"utils\">\r\n                <EditTopic topicItem={topicItem}/>\r\n                <DeleteTopic topicID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TopicItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {ADD_TOPIC, GET_COURSES, GET_TOPICS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const courseQueryObject = useQuery(GET_COURSES);\r\n    let {loading, error} = courseQueryObject;\r\n    let courseData = courseQueryObject.data;\r\n    const [addTopic, { data }] = useMutation(ADD_TOPIC, {\r\n        update(cache, { data: { addTopic } }) {\r\n          const { topics } = cache.readQuery({ query: GET_TOPICS })\r\n          cache.writeQuery({\r\n            query: GET_TOPICS,\r\n            data: { topics: topics.concat([addTopic]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await addTopic({ variables: { title, courseID } });\r\n    setTitle(\"\");\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    //window.location.reload();\r\n  }\r\n\r\n  const displayCourseOptions = (e) => {\r\n    if (loading) {\r\n        return <option>Loading</option>\r\n    } else if (error) {\r\n        return <option>Error</option>\r\n    } else {\r\n        return courseData.courses.map(item => {\r\n            return <option value={item.id}>{item.name}</option>\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Topic</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"title\">Topic Title:</Label>\r\n                    <Input type=\"text\" placeholder=\"Topic Title\" id=\"title\" name=\"title\" required value={title} onChange={e => {\r\n                        setTitle(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                        setCourseID(e.target.value)\r\n                    }} required>\r\n                        <option disabled value={\"\"}>--Course--</option>\r\n                        {displayCourseOptions()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTopic;","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport {GET_COURSES, GET_TOPICS, GET_TRAINERS, ASSIGN_TRAINER_TO_TOPIC, GET_TOPIC_BY_ID} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AssignTrainerToTopic = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const courseData = useQuery(GET_COURSES)\r\n    const trainerData = useQuery(GET_TRAINERS)\r\n    const topicData = useQuery(GET_TOPICS)\r\n    const [assignTrainerToTopic, assignData] = useMutation(ASSIGN_TRAINER_TO_TOPIC, {\r\n        update(cache, { data: { assignTrainerToTopic } }) {\r\n            const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n            cache.writeQuery({\r\n              query: GET_TRAINERS,\r\n              data: { students: trainers.map(item => {\r\n                if (item.id === assignTrainerToTopic.id) {\r\n                    return assignTrainerToTopic;\r\n                } \r\n                return item;\r\n              }) },\r\n            });\r\n          }\r\n    })\r\n    const [courseID, setCourseID] = useState(\"\");\r\n    const [trainerID, setTrainerID] = useState(\"\");\r\n    const [topicID, setTopicID] = useState(\"\");\r\n    \r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const displayCourseSelect = () => {\r\n    const { loading, error, data } = courseData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentCourses = data.courses;\r\n\r\n    return currentCourses.map(courseItem => {\r\n          return <option value={courseItem.id} key={courseItem.id}>\r\n            {courseItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayTrainerSelect = () => {\r\n    const { loading, error, data } = trainerData;\r\n\r\n    if (loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error) return <option disabled>{error.message}</option>;\r\n\r\n    let currentTrainers = data.trainers;\r\n\r\n    return currentTrainers.map(trainerItem => {\r\n          return <option value={trainerItem.id} key={trainerItem.id}>\r\n            {trainerItem.name}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const displayTopicSelect = () => {\r\n    const { loading, error, data } = topicData;\r\n\r\n    if (loading || trainerData.loading) return <option disabled>Loading...</option>;\r\n\r\n    if (error || trainerData.error) return <option disabled>{error.message}</option>;\r\n\r\n    \r\n    let currentTopics = data.topics;\r\n    currentTopics = currentTopics.filter(topicItem => {\r\n        return topicItem.courseID === courseID;\r\n    })\r\n\r\n    if (trainerID) {\r\n        let selectedTrainer = trainerData.data.trainers.filter(trainerItem => {\r\n            return trainerItem.id === trainerID;\r\n        })[0];\r\n        currentTopics = currentTopics.filter(topicItem => {\r\n            return !selectedTrainer.topicsIDs.includes(topicItem.id)\r\n        })\r\n    }\r\n\r\n    if (currentTopics.length === 0) return <option disabled>There is no topics related to the selected course or this trainer has been assign to all the topics in this course</option>;\r\n\r\n    return currentTopics.map(topicItem => {\r\n          return <option value={topicItem.id} key={topicItem.id}>\r\n            {topicItem.title}\r\n          </option>\r\n        })\r\n  }\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await assignTrainerToTopic({variables: {topicID, trainerID}})\r\n    setTrainerID(\"\");\r\n    setCourseID(\"\");\r\n    setTopicID(\"\");\r\n    setMessage(\"Successfully assigned\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Assign Trainer To Topic</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Assign Trainer To Topic</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n            <MessageAlert/>\r\n\r\n            <FormGroup>\r\n                <Label htmlFor=\"trainerID\">Trainer:</Label>\r\n                <select className=\"custom-select\" id=\"trainerID\" name=\"trainerID\" defaultValue={\"\"} value={trainerID} onChange={(e) => {\r\n                setTrainerID(e.target.value)\r\n                }}>\r\n                <option value={\"\"} disabled>--Trainer--</option>\r\n                {displayTrainerSelect()}\r\n                </select>\r\n            </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"courseID\">Course:</Label>\r\n                    <select className=\"custom-select\" id=\"courseID\" name=\"courseID\" defaultValue={\"\"} value={courseID} onChange={(e) => {\r\n                      setCourseID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Course--</option>\r\n                    {displayCourseSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"topicID\">Topic:</Label>\r\n                    <select className=\"custom-select\" id=\"topicID\" name=\"topicID\" defaultValue={\"\"} value={topicID} onChange={(e) => {\r\n                      setTopicID(e.target.value)\r\n                    }}>\r\n                      <option value={\"\"} disabled>--Topic--</option>\r\n                    {displayTopicSelect()}\r\n                    </select>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Assign</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignTrainerToTopic;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TOPICS} from \"../../queries/queries\";\r\nimport TopicItem from \"./TopicItem\";\r\nimport AddTopic from \"./AddTopic\";\r\nimport AssignTrainerToTopic from \"./AssignTrainerToTopic\"\r\nimport {Table, Container} from \"reactstrap\";\r\n\r\nfunction TopicList() {\r\n    const { loading, error, data } = useQuery(GET_TOPICS)\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const displayTopicItems = () => {\r\n        console.log(data);\r\n        return data.topics.map(topicItem => {\r\n            return <TopicItem key={topicItem.id} topicItem={topicItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content util-box\">\r\n                    <AddTopic/>\r\n                    <AssignTrainerToTopic/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Title</th>\r\n                            <th>Course</th>\r\n                            <th>Created Date</th>\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayTopicItems()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TopicList\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_STUDENTS, GET_STUDENT_BY_ID, DELETE_STUDENT} from \"../../queries/queries\";\r\n\r\nconst DeleteStudent = (props) => {\r\n  const {\r\n    className,\r\n    studentID\r\n  } = props;\r\n  const studentData = useQuery(GET_STUDENT_BY_ID, {\r\n      variables: {\r\n        studentID\r\n      }\r\n  })\r\n  const [deleteStudent, { data }] = useMutation(DELETE_STUDENT, {\r\n    update(cache, { data: { deleteStudent } }) {\r\n      const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n      cache.writeQuery({\r\n        query: GET_STUDENTS,\r\n        data: { students: students.filter(item => {\r\n            return item.id !== deleteStudent.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayCourseList = (courses) => {\r\n    if (courses.length === 0){\r\n        return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n    } else {\r\n        return courses.map(courseItem => {\r\n            return <li key={courseItem.id}>{courseItem.name}</li>\r\n        })\r\n    }\r\n}\r\n\r\n  const displayStudentDetails = () => {\r\n    const {loading, error, data} = studentData;\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, courses} = data.getStudentByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Courses:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayCourseList(courses)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteStudent({ variables: { studentID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Student</ModalHeader>\r\n        <ModalBody>\r\n            {displayStudentDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteStudent;","import React from 'react';\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditStudent from \"./EditStudent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DeleteStudent from \"./DeleteStudent\";\r\n\r\nfunction StudentItem(props) {\r\n    const {studentItem} = props;\r\n    const {name, dob, phone_number, id, user} = studentItem;\r\n    const {email} = user;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/students/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth_ISODate(dob)}</td>\r\n            <td>{phone_number}</td>\r\n            <td><a href={`mailto:${email}`}>{email}</a></td>\r\n            {/*<td>{dateParserWithMonth(created_date)}</td>*/}\r\n            <td className=\"utils\">\r\n                <EditStudent studentItem={studentItem}/>\r\n                <DeleteStudent studentID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default StudentItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_STUDENT, GET_STUDENTS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddStudent = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [phone_number, setPhoneNumber] = useState(\"\");\r\n    const [dob, setDob] = useState(\"\");\r\n    const [coursesIDs, setCoursesIDs] = useState([]);\r\n    const [addStudent, { data }] = useMutation(ADD_STUDENT, {\r\n        update(cache, { data: { addStudent } }) {\r\n          const { students } = cache.readQuery({ query: GET_STUDENTS })\r\n          cache.writeQuery({\r\n            query: GET_STUDENTS,\r\n            data: { students: students.concat([addStudent]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await addStudent({ variables: { name, email, address, password, dob, phone_number, coursesIDs } });\r\n    resetValue();\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n  }\r\n\r\n  const resetValue = () => {\r\n    setName(\"\")\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n    setAddress(\"\")\r\n    setPhoneNumber(\"\")\r\n    setDob(\"\")\r\n    setCoursesIDs([])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Student</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Student</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"email\">Email:</Label>\r\n                    <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                        setEmail(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"password\">Password:</Label>\r\n                    <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddStudent;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_STUDENTS} from \"../../queries/queries\";\r\nimport StudentItem from \"./StudentItem\";\r\nimport AddStudent from \"./AddStudent\";\r\nimport {Table, Container} from \"reactstrap\";\r\n\r\nfunction StudentList() {\r\n    const { loading, error, data } = useQuery(GET_STUDENTS)\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const displayStudentItems = () => {\r\n        return data.students.map(studentItem => {\r\n            return <StudentItem key={studentItem.id} studentItem={studentItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content\">\r\n                    <AddStudent/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Date of Birth</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Email</th>\r\n                            {/*<th>Created Date</th>*/}\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayStudentItems()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StudentList\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\";\r\nimport {GET_TRAINERS, GET_TRAINER_BY_ID, DELETE_TRAINER} from \"../../queries/queries\";\r\n\r\nconst DeleteTrainer = (props) => {\r\n  const {\r\n    className,\r\n    trainerID\r\n  } = props;\r\n  const trainerData = useQuery(GET_TRAINER_BY_ID, {\r\n      variables: {\r\n        trainerID\r\n      }\r\n  })\r\n  const [deleteTrainer, { data }] = useMutation(DELETE_TRAINER, {\r\n    update(cache, { data: { deleteTrainer } }) {\r\n      const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n      cache.writeQuery({\r\n        query: GET_TRAINERS,\r\n        data: { trainers: trainers.filter(item => {\r\n            return item.id !== deleteTrainer.id\r\n        }) },\r\n      });\r\n    }\r\n  });\r\n\r\n  const dipslayTopicList = (topics) => {\r\n    if (topics.length === 0){\r\n        return <li key={\"LOL\"}>No course has been participated by this student</li>\r\n    } else {\r\n        return topics.map(topicItem => {\r\n            return <li key={topicItem.id}>{topicItem.title}</li>\r\n        })\r\n    }\r\n  }\r\n\r\n  const displayTrainerDetails = () => {\r\n    const {loading, error, data} = trainerData;\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const {name, topics} = data.getTrainerByID;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Name:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <p>{name}</p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-title\">\r\n                <p><b>Courses:</b></p>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 details-data\">\r\n                <ul>\r\n                    {dipslayTopicList(topics)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    await deleteTrainer({ variables: { trainerID } })\r\n    setModal(false);\r\n  }\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Delete</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Delete Student</ModalHeader>\r\n        <ModalBody>\r\n            {displayTrainerDetails()}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={onDelete}>Yes</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>No</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteTrainer;","import React from 'react';\r\nimport {dateParserWithMonth_ISODate} from \"../../utils/dateParser\";\r\nimport EditTrainer from \"./EditTrainer\";\r\nimport {Link} from \"react-router-dom\"\r\nimport DeleteTrainer from \"./DeleteTrainer\";\r\n\r\nfunction TrainerItem(props) {\r\n    const {trainerItem} = props;\r\n    const {name, dob, phone_number, id, user} = trainerItem;\r\n    const {email} = user;\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/trainers/${id}`}>{name}</Link></td>\r\n            <td>{dateParserWithMonth_ISODate(dob)}</td>\r\n            <td>{phone_number}</td>\r\n            <td><a href={`mailto:${email}`}>{email}</a></td>\r\n            {/*<td>{dateParserWithMonth(created_date)}</td>*/}\r\n            <td className=\"utils\">\r\n                <EditTrainer trainerItem={trainerItem}/>\r\n                <DeleteTrainer trainerID={id}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TrainerItem\r\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {ADD_TRAINER, GET_TRAINERS} from \"../../queries/queries\";\r\nimport {MessageContext} from \"../../context/MessageContext\";\r\nimport MessageAlert from \"../Partial/MessageAlert\";\r\n\r\nconst AddTrainer = (props) => {\r\n    const {setMessage, setMessageType, setVisible} = useContext(MessageContext);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [phone_number, setPhoneNumber] = useState(\"\");\r\n    const [dob, setDob] = useState(\"\");\r\n    const [profession, setProfession] = useState(\"\");\r\n    const [topicsIDs, setTopicsIDs] = useState([]);\r\n    const [addTrainer, { data }] = useMutation(ADD_TRAINER, {\r\n        update(cache, { data: { addTrainer } }) {\r\n          const { trainers } = cache.readQuery({ query: GET_TRAINERS })\r\n          cache.writeQuery({\r\n            query: GET_TRAINERS,\r\n            data: { trainers: trainers.concat([addTrainer]) },\r\n          });\r\n        }\r\n      });\r\n\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await addTrainer({ variables: { name, email, address, password, dob, phone_number, topicsIDs, profession } });\r\n    resetValue();\r\n    setMessage(\"Successfully created\");\r\n    setMessageType(\"success\");\r\n    setVisible(true);\r\n  }\r\n\r\n  const resetValue = () => {\r\n    setName(\"\")\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n    setProfession(\"\")\r\n    setAddress(\"\")\r\n    setPhoneNumber(\"\")\r\n    setDob(\"\")\r\n    setTopicsIDs([])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" onClick={toggle}>Add Trainer</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Create New Trainer</ModalHeader>\r\n        <ModalBody>\r\n        \r\n            <Form onSubmit={onSubmit}>\r\n\r\n                <MessageAlert/>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"name\">Name:</Label>\r\n                    <Input type=\"text\" placeholder=\"Name\" id=\"name\" name=\"name\" required value={name} onChange={e => {\r\n                        setName(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"profession\">Profession:</Label>\r\n                    <Input type=\"text\" placeholder=\"Profession\" id=\"profession\" name=\"profession\" required value={profession} onChange={e => {\r\n                        setProfession(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"dob\">Date of Birth:</Label>\r\n                    <Input type=\"date\" placeholder=\"DOB\" id=\"dob\" name=\"dob\" required value={dob} onChange={e => {\r\n                        setDob(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"phone_number\">Phone Number:</Label>\r\n                    <Input type=\"tel\" placeholder=\"Phone Number\" id=\"phone_number\" name=\"phone_number\" required value={phone_number} onChange={e => {\r\n                        setPhoneNumber(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"address\">Address:</Label>\r\n                    <textarea id=\"address\" name=\"address\" className=\"form-control\" rows=\"5\" placeholder=\"Address\" value={address} onChange={e => {\r\n                        setAddress(e.target.value)\r\n                    }}>\r\n                    </textarea>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"email\">Email:</Label>\r\n                    <Input type=\"email\" placeholder=\"Email\" id=\"email\" name=\"email\" required value={email} onChange={e => {\r\n                        setEmail(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"password\">Password:</Label>\r\n                    <Input type=\"password\" placeholder=\"Password\" id=\"password\" name=\"password\" required value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Button color=\"dark\" block type=\"submit\">Create</Button>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTrainer;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {GET_TRAINERS} from \"../../queries/queries\";\r\nimport TrainerItem from \"./TrainerItem\";\r\nimport AddTrainer from \"./AddTrainer\";\r\nimport {Table, Container} from \"reactstrap\";\r\n\r\nfunction TrainerList() {\r\n    const { loading, error, data } = useQuery(GET_TRAINERS)\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>{error.message}</p>;\r\n\r\n    const displayTrainerItems = () => {\r\n        return data.trainers.map(trainerItem => {\r\n            return <TrainerItem key={trainerItem.id} trainerItem={trainerItem}/>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div className=\"box\">\r\n                <h2 className=\"box-title\">Utilities</h2>\r\n                <div className=\"box-content\">\r\n                    <AddTrainer/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"box table-container\">\r\n                <h2 className=\"box-title\">Data</h2>\r\n                <div className=\"box-content\">\r\n                    <Table hover>\r\n                        <thead>\r\n                            <th>Name</th>\r\n                            <th>Date of Birth</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Email</th>\r\n                            {/*<th>Created Date</th>*/}\r\n                            <th>Utilities</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            {displayTrainerItems()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TrainerList\r\n","import React from 'react';\r\nimport client from \"../../config/client\";\r\n\r\nfunction Logout(props) {\r\n    const clearStore = async () => {\r\n        localStorage.removeItem(\"userID\");\r\n        await client.clearStore();\r\n        props.history.push(\"/\");\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {clearStore()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logout\r\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from \"./config/client\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport MessageContextProvider from \"./context/MessageContext\";\n\nimport SideNav from \"./components/Partial/SideNav\";\nimport TopNav from \"./components/Partial/TopNav\";\nimport Login from \"./components/User/Login\";\nimport Profile from \"./components/User/Profile\";\nimport CourseList from \"./components/Course/CourseList\";\nimport CourseDetails from \"./components/Course/CourseDetails\";\nimport TopicDetails from \"./components/Topic/TopicDetails\";\nimport StudentDetails from \"./components/Student/StudentDetails\";\nimport TrainerDetails from \"./components/Trainer/TrainerDetails\";\nimport ChangePassword from \"./components/User/ChangePassword\";\nimport TopicList from \"./components/Topic/TopicList\";\nimport StudentList from \"./components/Student/StudentList\";\nimport TrainerList from \"./components/Trainer/TrainerList\";\nimport Logout from \"./components/Partial/Logout\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Router>\n          <TopNav/>\n          <SideNav/>\n          <MessageContextProvider>\n          <main>\n            <Switch>\n              <Route path=\"/\" exact component={Login}/>\n              <Route path=\"/profile\" exact component={Profile}/>\n              <Route path=\"/courses\" exact component={CourseList}/>\n              <Route path=\"/courses/:courseID\" component={CourseDetails}/>\n              <Route path=\"/topics\" exact component={TopicList}/>\n              <Route path=\"/topics/:topicID\" component={TopicDetails}/>\n              <Route path=\"/students/:studentID\" component={StudentDetails}/>\n              <Route path=\"/trainers/:trainerID\" component={TrainerDetails}/>\n              <Route path=\"/students\" exact component={StudentList}/>\n              <Route path=\"/trainers\" exact component={TrainerList}/>\n              <Route path=\"/change-password\" exact component={ChangePassword}/>\n              <Route path=\"/logout\" exact component={Logout}/>\n            </Switch>\n          </main>\n          </MessageContextProvider>\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}